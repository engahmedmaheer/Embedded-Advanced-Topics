
Bootloader_UserApp.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08008000  08008000  00008000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002268  080081c4  080081c4  000081c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  0800a42c  0800a42c  0000a42c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a45c  0800a45c  0001000c  2**0
                  CONTENTS
  4 .ARM          00000008  0800a45c  0800a45c  0000a45c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a464  0800a464  0001000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a464  0800a464  0000a464  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a468  0800a468  0000a468  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  0800a46c  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000064  2000000c  0800a478  0001000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000070  0800a478  00010070  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0001000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0001003c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00007f29  00000000  00000000  0001007f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001538  00000000  00000000  00017fa8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000688  00000000  00000000  000194e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000500  00000000  00000000  00019b68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00020170  00000000  00000000  0001a068  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00008db9  00000000  00000000  0003a1d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c43e9  00000000  00000000  00042f91  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000019b0  00000000  00000000  0010737c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000060  00000000  00000000  00108d2c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080081c4 <__do_global_dtors_aux>:
 80081c4:	b510      	push	{r4, lr}
 80081c6:	4c05      	ldr	r4, [pc, #20]	; (80081dc <__do_global_dtors_aux+0x18>)
 80081c8:	7823      	ldrb	r3, [r4, #0]
 80081ca:	b933      	cbnz	r3, 80081da <__do_global_dtors_aux+0x16>
 80081cc:	4b04      	ldr	r3, [pc, #16]	; (80081e0 <__do_global_dtors_aux+0x1c>)
 80081ce:	b113      	cbz	r3, 80081d6 <__do_global_dtors_aux+0x12>
 80081d0:	4804      	ldr	r0, [pc, #16]	; (80081e4 <__do_global_dtors_aux+0x20>)
 80081d2:	f3af 8000 	nop.w
 80081d6:	2301      	movs	r3, #1
 80081d8:	7023      	strb	r3, [r4, #0]
 80081da:	bd10      	pop	{r4, pc}
 80081dc:	2000000c 	.word	0x2000000c
 80081e0:	00000000 	.word	0x00000000
 80081e4:	0800a414 	.word	0x0800a414

080081e8 <frame_dummy>:
 80081e8:	b508      	push	{r3, lr}
 80081ea:	4b03      	ldr	r3, [pc, #12]	; (80081f8 <frame_dummy+0x10>)
 80081ec:	b11b      	cbz	r3, 80081f6 <frame_dummy+0xe>
 80081ee:	4903      	ldr	r1, [pc, #12]	; (80081fc <frame_dummy+0x14>)
 80081f0:	4803      	ldr	r0, [pc, #12]	; (8008200 <frame_dummy+0x18>)
 80081f2:	f3af 8000 	nop.w
 80081f6:	bd08      	pop	{r3, pc}
 80081f8:	00000000 	.word	0x00000000
 80081fc:	20000010 	.word	0x20000010
 8008200:	0800a414 	.word	0x0800a414

08008204 <__aeabi_uldivmod>:
 8008204:	b953      	cbnz	r3, 800821c <__aeabi_uldivmod+0x18>
 8008206:	b94a      	cbnz	r2, 800821c <__aeabi_uldivmod+0x18>
 8008208:	2900      	cmp	r1, #0
 800820a:	bf08      	it	eq
 800820c:	2800      	cmpeq	r0, #0
 800820e:	bf1c      	itt	ne
 8008210:	f04f 31ff 	movne.w	r1, #4294967295
 8008214:	f04f 30ff 	movne.w	r0, #4294967295
 8008218:	f000 b970 	b.w	80084fc <__aeabi_idiv0>
 800821c:	f1ad 0c08 	sub.w	ip, sp, #8
 8008220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8008224:	f000 f806 	bl	8008234 <__udivmoddi4>
 8008228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800822c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008230:	b004      	add	sp, #16
 8008232:	4770      	bx	lr

08008234 <__udivmoddi4>:
 8008234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008238:	9e08      	ldr	r6, [sp, #32]
 800823a:	460d      	mov	r5, r1
 800823c:	4604      	mov	r4, r0
 800823e:	460f      	mov	r7, r1
 8008240:	2b00      	cmp	r3, #0
 8008242:	d14a      	bne.n	80082da <__udivmoddi4+0xa6>
 8008244:	428a      	cmp	r2, r1
 8008246:	4694      	mov	ip, r2
 8008248:	d965      	bls.n	8008316 <__udivmoddi4+0xe2>
 800824a:	fab2 f382 	clz	r3, r2
 800824e:	b143      	cbz	r3, 8008262 <__udivmoddi4+0x2e>
 8008250:	fa02 fc03 	lsl.w	ip, r2, r3
 8008254:	f1c3 0220 	rsb	r2, r3, #32
 8008258:	409f      	lsls	r7, r3
 800825a:	fa20 f202 	lsr.w	r2, r0, r2
 800825e:	4317      	orrs	r7, r2
 8008260:	409c      	lsls	r4, r3
 8008262:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8008266:	fa1f f58c 	uxth.w	r5, ip
 800826a:	fbb7 f1fe 	udiv	r1, r7, lr
 800826e:	0c22      	lsrs	r2, r4, #16
 8008270:	fb0e 7711 	mls	r7, lr, r1, r7
 8008274:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8008278:	fb01 f005 	mul.w	r0, r1, r5
 800827c:	4290      	cmp	r0, r2
 800827e:	d90a      	bls.n	8008296 <__udivmoddi4+0x62>
 8008280:	eb1c 0202 	adds.w	r2, ip, r2
 8008284:	f101 37ff 	add.w	r7, r1, #4294967295
 8008288:	f080 811c 	bcs.w	80084c4 <__udivmoddi4+0x290>
 800828c:	4290      	cmp	r0, r2
 800828e:	f240 8119 	bls.w	80084c4 <__udivmoddi4+0x290>
 8008292:	3902      	subs	r1, #2
 8008294:	4462      	add	r2, ip
 8008296:	1a12      	subs	r2, r2, r0
 8008298:	b2a4      	uxth	r4, r4
 800829a:	fbb2 f0fe 	udiv	r0, r2, lr
 800829e:	fb0e 2210 	mls	r2, lr, r0, r2
 80082a2:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80082a6:	fb00 f505 	mul.w	r5, r0, r5
 80082aa:	42a5      	cmp	r5, r4
 80082ac:	d90a      	bls.n	80082c4 <__udivmoddi4+0x90>
 80082ae:	eb1c 0404 	adds.w	r4, ip, r4
 80082b2:	f100 32ff 	add.w	r2, r0, #4294967295
 80082b6:	f080 8107 	bcs.w	80084c8 <__udivmoddi4+0x294>
 80082ba:	42a5      	cmp	r5, r4
 80082bc:	f240 8104 	bls.w	80084c8 <__udivmoddi4+0x294>
 80082c0:	4464      	add	r4, ip
 80082c2:	3802      	subs	r0, #2
 80082c4:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80082c8:	1b64      	subs	r4, r4, r5
 80082ca:	2100      	movs	r1, #0
 80082cc:	b11e      	cbz	r6, 80082d6 <__udivmoddi4+0xa2>
 80082ce:	40dc      	lsrs	r4, r3
 80082d0:	2300      	movs	r3, #0
 80082d2:	e9c6 4300 	strd	r4, r3, [r6]
 80082d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80082da:	428b      	cmp	r3, r1
 80082dc:	d908      	bls.n	80082f0 <__udivmoddi4+0xbc>
 80082de:	2e00      	cmp	r6, #0
 80082e0:	f000 80ed 	beq.w	80084be <__udivmoddi4+0x28a>
 80082e4:	2100      	movs	r1, #0
 80082e6:	e9c6 0500 	strd	r0, r5, [r6]
 80082ea:	4608      	mov	r0, r1
 80082ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80082f0:	fab3 f183 	clz	r1, r3
 80082f4:	2900      	cmp	r1, #0
 80082f6:	d149      	bne.n	800838c <__udivmoddi4+0x158>
 80082f8:	42ab      	cmp	r3, r5
 80082fa:	d302      	bcc.n	8008302 <__udivmoddi4+0xce>
 80082fc:	4282      	cmp	r2, r0
 80082fe:	f200 80f8 	bhi.w	80084f2 <__udivmoddi4+0x2be>
 8008302:	1a84      	subs	r4, r0, r2
 8008304:	eb65 0203 	sbc.w	r2, r5, r3
 8008308:	2001      	movs	r0, #1
 800830a:	4617      	mov	r7, r2
 800830c:	2e00      	cmp	r6, #0
 800830e:	d0e2      	beq.n	80082d6 <__udivmoddi4+0xa2>
 8008310:	e9c6 4700 	strd	r4, r7, [r6]
 8008314:	e7df      	b.n	80082d6 <__udivmoddi4+0xa2>
 8008316:	b902      	cbnz	r2, 800831a <__udivmoddi4+0xe6>
 8008318:	deff      	udf	#255	; 0xff
 800831a:	fab2 f382 	clz	r3, r2
 800831e:	2b00      	cmp	r3, #0
 8008320:	f040 8090 	bne.w	8008444 <__udivmoddi4+0x210>
 8008324:	1a8a      	subs	r2, r1, r2
 8008326:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800832a:	fa1f fe8c 	uxth.w	lr, ip
 800832e:	2101      	movs	r1, #1
 8008330:	fbb2 f5f7 	udiv	r5, r2, r7
 8008334:	fb07 2015 	mls	r0, r7, r5, r2
 8008338:	0c22      	lsrs	r2, r4, #16
 800833a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800833e:	fb0e f005 	mul.w	r0, lr, r5
 8008342:	4290      	cmp	r0, r2
 8008344:	d908      	bls.n	8008358 <__udivmoddi4+0x124>
 8008346:	eb1c 0202 	adds.w	r2, ip, r2
 800834a:	f105 38ff 	add.w	r8, r5, #4294967295
 800834e:	d202      	bcs.n	8008356 <__udivmoddi4+0x122>
 8008350:	4290      	cmp	r0, r2
 8008352:	f200 80cb 	bhi.w	80084ec <__udivmoddi4+0x2b8>
 8008356:	4645      	mov	r5, r8
 8008358:	1a12      	subs	r2, r2, r0
 800835a:	b2a4      	uxth	r4, r4
 800835c:	fbb2 f0f7 	udiv	r0, r2, r7
 8008360:	fb07 2210 	mls	r2, r7, r0, r2
 8008364:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8008368:	fb0e fe00 	mul.w	lr, lr, r0
 800836c:	45a6      	cmp	lr, r4
 800836e:	d908      	bls.n	8008382 <__udivmoddi4+0x14e>
 8008370:	eb1c 0404 	adds.w	r4, ip, r4
 8008374:	f100 32ff 	add.w	r2, r0, #4294967295
 8008378:	d202      	bcs.n	8008380 <__udivmoddi4+0x14c>
 800837a:	45a6      	cmp	lr, r4
 800837c:	f200 80bb 	bhi.w	80084f6 <__udivmoddi4+0x2c2>
 8008380:	4610      	mov	r0, r2
 8008382:	eba4 040e 	sub.w	r4, r4, lr
 8008386:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800838a:	e79f      	b.n	80082cc <__udivmoddi4+0x98>
 800838c:	f1c1 0720 	rsb	r7, r1, #32
 8008390:	408b      	lsls	r3, r1
 8008392:	fa22 fc07 	lsr.w	ip, r2, r7
 8008396:	ea4c 0c03 	orr.w	ip, ip, r3
 800839a:	fa05 f401 	lsl.w	r4, r5, r1
 800839e:	fa20 f307 	lsr.w	r3, r0, r7
 80083a2:	40fd      	lsrs	r5, r7
 80083a4:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80083a8:	4323      	orrs	r3, r4
 80083aa:	fbb5 f8f9 	udiv	r8, r5, r9
 80083ae:	fa1f fe8c 	uxth.w	lr, ip
 80083b2:	fb09 5518 	mls	r5, r9, r8, r5
 80083b6:	0c1c      	lsrs	r4, r3, #16
 80083b8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80083bc:	fb08 f50e 	mul.w	r5, r8, lr
 80083c0:	42a5      	cmp	r5, r4
 80083c2:	fa02 f201 	lsl.w	r2, r2, r1
 80083c6:	fa00 f001 	lsl.w	r0, r0, r1
 80083ca:	d90b      	bls.n	80083e4 <__udivmoddi4+0x1b0>
 80083cc:	eb1c 0404 	adds.w	r4, ip, r4
 80083d0:	f108 3aff 	add.w	sl, r8, #4294967295
 80083d4:	f080 8088 	bcs.w	80084e8 <__udivmoddi4+0x2b4>
 80083d8:	42a5      	cmp	r5, r4
 80083da:	f240 8085 	bls.w	80084e8 <__udivmoddi4+0x2b4>
 80083de:	f1a8 0802 	sub.w	r8, r8, #2
 80083e2:	4464      	add	r4, ip
 80083e4:	1b64      	subs	r4, r4, r5
 80083e6:	b29d      	uxth	r5, r3
 80083e8:	fbb4 f3f9 	udiv	r3, r4, r9
 80083ec:	fb09 4413 	mls	r4, r9, r3, r4
 80083f0:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80083f4:	fb03 fe0e 	mul.w	lr, r3, lr
 80083f8:	45a6      	cmp	lr, r4
 80083fa:	d908      	bls.n	800840e <__udivmoddi4+0x1da>
 80083fc:	eb1c 0404 	adds.w	r4, ip, r4
 8008400:	f103 35ff 	add.w	r5, r3, #4294967295
 8008404:	d26c      	bcs.n	80084e0 <__udivmoddi4+0x2ac>
 8008406:	45a6      	cmp	lr, r4
 8008408:	d96a      	bls.n	80084e0 <__udivmoddi4+0x2ac>
 800840a:	3b02      	subs	r3, #2
 800840c:	4464      	add	r4, ip
 800840e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8008412:	fba3 9502 	umull	r9, r5, r3, r2
 8008416:	eba4 040e 	sub.w	r4, r4, lr
 800841a:	42ac      	cmp	r4, r5
 800841c:	46c8      	mov	r8, r9
 800841e:	46ae      	mov	lr, r5
 8008420:	d356      	bcc.n	80084d0 <__udivmoddi4+0x29c>
 8008422:	d053      	beq.n	80084cc <__udivmoddi4+0x298>
 8008424:	b156      	cbz	r6, 800843c <__udivmoddi4+0x208>
 8008426:	ebb0 0208 	subs.w	r2, r0, r8
 800842a:	eb64 040e 	sbc.w	r4, r4, lr
 800842e:	fa04 f707 	lsl.w	r7, r4, r7
 8008432:	40ca      	lsrs	r2, r1
 8008434:	40cc      	lsrs	r4, r1
 8008436:	4317      	orrs	r7, r2
 8008438:	e9c6 7400 	strd	r7, r4, [r6]
 800843c:	4618      	mov	r0, r3
 800843e:	2100      	movs	r1, #0
 8008440:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008444:	f1c3 0120 	rsb	r1, r3, #32
 8008448:	fa02 fc03 	lsl.w	ip, r2, r3
 800844c:	fa20 f201 	lsr.w	r2, r0, r1
 8008450:	fa25 f101 	lsr.w	r1, r5, r1
 8008454:	409d      	lsls	r5, r3
 8008456:	432a      	orrs	r2, r5
 8008458:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800845c:	fa1f fe8c 	uxth.w	lr, ip
 8008460:	fbb1 f0f7 	udiv	r0, r1, r7
 8008464:	fb07 1510 	mls	r5, r7, r0, r1
 8008468:	0c11      	lsrs	r1, r2, #16
 800846a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800846e:	fb00 f50e 	mul.w	r5, r0, lr
 8008472:	428d      	cmp	r5, r1
 8008474:	fa04 f403 	lsl.w	r4, r4, r3
 8008478:	d908      	bls.n	800848c <__udivmoddi4+0x258>
 800847a:	eb1c 0101 	adds.w	r1, ip, r1
 800847e:	f100 38ff 	add.w	r8, r0, #4294967295
 8008482:	d22f      	bcs.n	80084e4 <__udivmoddi4+0x2b0>
 8008484:	428d      	cmp	r5, r1
 8008486:	d92d      	bls.n	80084e4 <__udivmoddi4+0x2b0>
 8008488:	3802      	subs	r0, #2
 800848a:	4461      	add	r1, ip
 800848c:	1b49      	subs	r1, r1, r5
 800848e:	b292      	uxth	r2, r2
 8008490:	fbb1 f5f7 	udiv	r5, r1, r7
 8008494:	fb07 1115 	mls	r1, r7, r5, r1
 8008498:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800849c:	fb05 f10e 	mul.w	r1, r5, lr
 80084a0:	4291      	cmp	r1, r2
 80084a2:	d908      	bls.n	80084b6 <__udivmoddi4+0x282>
 80084a4:	eb1c 0202 	adds.w	r2, ip, r2
 80084a8:	f105 38ff 	add.w	r8, r5, #4294967295
 80084ac:	d216      	bcs.n	80084dc <__udivmoddi4+0x2a8>
 80084ae:	4291      	cmp	r1, r2
 80084b0:	d914      	bls.n	80084dc <__udivmoddi4+0x2a8>
 80084b2:	3d02      	subs	r5, #2
 80084b4:	4462      	add	r2, ip
 80084b6:	1a52      	subs	r2, r2, r1
 80084b8:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80084bc:	e738      	b.n	8008330 <__udivmoddi4+0xfc>
 80084be:	4631      	mov	r1, r6
 80084c0:	4630      	mov	r0, r6
 80084c2:	e708      	b.n	80082d6 <__udivmoddi4+0xa2>
 80084c4:	4639      	mov	r1, r7
 80084c6:	e6e6      	b.n	8008296 <__udivmoddi4+0x62>
 80084c8:	4610      	mov	r0, r2
 80084ca:	e6fb      	b.n	80082c4 <__udivmoddi4+0x90>
 80084cc:	4548      	cmp	r0, r9
 80084ce:	d2a9      	bcs.n	8008424 <__udivmoddi4+0x1f0>
 80084d0:	ebb9 0802 	subs.w	r8, r9, r2
 80084d4:	eb65 0e0c 	sbc.w	lr, r5, ip
 80084d8:	3b01      	subs	r3, #1
 80084da:	e7a3      	b.n	8008424 <__udivmoddi4+0x1f0>
 80084dc:	4645      	mov	r5, r8
 80084de:	e7ea      	b.n	80084b6 <__udivmoddi4+0x282>
 80084e0:	462b      	mov	r3, r5
 80084e2:	e794      	b.n	800840e <__udivmoddi4+0x1da>
 80084e4:	4640      	mov	r0, r8
 80084e6:	e7d1      	b.n	800848c <__udivmoddi4+0x258>
 80084e8:	46d0      	mov	r8, sl
 80084ea:	e77b      	b.n	80083e4 <__udivmoddi4+0x1b0>
 80084ec:	3d02      	subs	r5, #2
 80084ee:	4462      	add	r2, ip
 80084f0:	e732      	b.n	8008358 <__udivmoddi4+0x124>
 80084f2:	4608      	mov	r0, r1
 80084f4:	e70a      	b.n	800830c <__udivmoddi4+0xd8>
 80084f6:	4464      	add	r4, ip
 80084f8:	3802      	subs	r0, #2
 80084fa:	e742      	b.n	8008382 <__udivmoddi4+0x14e>

080084fc <__aeabi_idiv0>:
 80084fc:	4770      	bx	lr
 80084fe:	bf00      	nop

08008500 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8008500:	b5b0      	push	{r4, r5, r7, lr}
 8008502:	b086      	sub	sp, #24
 8008504:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

	char HelloUserApp[]="Hello From User App \r \n";
 8008506:	4b0e      	ldr	r3, [pc, #56]	; (8008540 <main+0x40>)
 8008508:	463c      	mov	r4, r7
 800850a:	461d      	mov	r5, r3
 800850c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800850e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008510:	e895 0003 	ldmia.w	r5, {r0, r1}
 8008514:	e884 0003 	stmia.w	r4, {r0, r1}
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8008518:	f000 fa12 	bl	8008940 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800851c:	f000 f814 	bl	8008548 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8008520:	f000 f8aa 	bl	8008678 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8008524:	f000 f87e 	bl	8008624 <MX_USART2_UART_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  HAL_UART_Transmit(&huart2, (uint8_t*)HelloUserApp, sizeof(HelloUserApp), HAL_MAX_DELAY);
 8008528:	4639      	mov	r1, r7
 800852a:	f04f 33ff 	mov.w	r3, #4294967295
 800852e:	2218      	movs	r2, #24
 8008530:	4804      	ldr	r0, [pc, #16]	; (8008544 <main+0x44>)
 8008532:	f001 fbce 	bl	8009cd2 <HAL_UART_Transmit>
	  HAL_Delay(1000);
 8008536:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800853a:	f000 fa73 	bl	8008a24 <HAL_Delay>
	  HAL_UART_Transmit(&huart2, (uint8_t*)HelloUserApp, sizeof(HelloUserApp), HAL_MAX_DELAY);
 800853e:	e7f3      	b.n	8008528 <main+0x28>
 8008540:	0800a42c 	.word	0x0800a42c
 8008544:	20000028 	.word	0x20000028

08008548 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8008548:	b580      	push	{r7, lr}
 800854a:	b094      	sub	sp, #80	; 0x50
 800854c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800854e:	f107 031c 	add.w	r3, r7, #28
 8008552:	2234      	movs	r2, #52	; 0x34
 8008554:	2100      	movs	r1, #0
 8008556:	4618      	mov	r0, r3
 8008558:	f001 ff30 	bl	800a3bc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800855c:	f107 0308 	add.w	r3, r7, #8
 8008560:	2200      	movs	r2, #0
 8008562:	601a      	str	r2, [r3, #0]
 8008564:	605a      	str	r2, [r3, #4]
 8008566:	609a      	str	r2, [r3, #8]
 8008568:	60da      	str	r2, [r3, #12]
 800856a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800856c:	2300      	movs	r3, #0
 800856e:	607b      	str	r3, [r7, #4]
 8008570:	4b2a      	ldr	r3, [pc, #168]	; (800861c <SystemClock_Config+0xd4>)
 8008572:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008574:	4a29      	ldr	r2, [pc, #164]	; (800861c <SystemClock_Config+0xd4>)
 8008576:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800857a:	6413      	str	r3, [r2, #64]	; 0x40
 800857c:	4b27      	ldr	r3, [pc, #156]	; (800861c <SystemClock_Config+0xd4>)
 800857e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008580:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008584:	607b      	str	r3, [r7, #4]
 8008586:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8008588:	2300      	movs	r3, #0
 800858a:	603b      	str	r3, [r7, #0]
 800858c:	4b24      	ldr	r3, [pc, #144]	; (8008620 <SystemClock_Config+0xd8>)
 800858e:	681b      	ldr	r3, [r3, #0]
 8008590:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8008594:	4a22      	ldr	r2, [pc, #136]	; (8008620 <SystemClock_Config+0xd8>)
 8008596:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800859a:	6013      	str	r3, [r2, #0]
 800859c:	4b20      	ldr	r3, [pc, #128]	; (8008620 <SystemClock_Config+0xd8>)
 800859e:	681b      	ldr	r3, [r3, #0]
 80085a0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80085a4:	603b      	str	r3, [r7, #0]
 80085a6:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80085a8:	2302      	movs	r3, #2
 80085aa:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80085ac:	2301      	movs	r3, #1
 80085ae:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80085b0:	2310      	movs	r3, #16
 80085b2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80085b4:	2302      	movs	r3, #2
 80085b6:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80085b8:	2300      	movs	r3, #0
 80085ba:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 80085bc:	2310      	movs	r3, #16
 80085be:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 80085c0:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80085c4:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80085c6:	2304      	movs	r3, #4
 80085c8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80085ca:	2302      	movs	r3, #2
 80085cc:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80085ce:	2302      	movs	r3, #2
 80085d0:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80085d2:	f107 031c 	add.w	r3, r7, #28
 80085d6:	4618      	mov	r0, r3
 80085d8:	f001 f890 	bl	80096fc <HAL_RCC_OscConfig>
 80085dc:	4603      	mov	r3, r0
 80085de:	2b00      	cmp	r3, #0
 80085e0:	d001      	beq.n	80085e6 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 80085e2:	f000 f8bf 	bl	8008764 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80085e6:	230f      	movs	r3, #15
 80085e8:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80085ea:	2302      	movs	r3, #2
 80085ec:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80085ee:	2300      	movs	r3, #0
 80085f0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80085f2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80085f6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80085f8:	2300      	movs	r3, #0
 80085fa:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80085fc:	f107 0308 	add.w	r3, r7, #8
 8008600:	2102      	movs	r1, #2
 8008602:	4618      	mov	r0, r3
 8008604:	f000 fd30 	bl	8009068 <HAL_RCC_ClockConfig>
 8008608:	4603      	mov	r3, r0
 800860a:	2b00      	cmp	r3, #0
 800860c:	d001      	beq.n	8008612 <SystemClock_Config+0xca>
  {
    Error_Handler();
 800860e:	f000 f8a9 	bl	8008764 <Error_Handler>
  }
}
 8008612:	bf00      	nop
 8008614:	3750      	adds	r7, #80	; 0x50
 8008616:	46bd      	mov	sp, r7
 8008618:	bd80      	pop	{r7, pc}
 800861a:	bf00      	nop
 800861c:	40023800 	.word	0x40023800
 8008620:	40007000 	.word	0x40007000

08008624 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8008624:	b580      	push	{r7, lr}
 8008626:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8008628:	4b11      	ldr	r3, [pc, #68]	; (8008670 <MX_USART2_UART_Init+0x4c>)
 800862a:	4a12      	ldr	r2, [pc, #72]	; (8008674 <MX_USART2_UART_Init+0x50>)
 800862c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800862e:	4b10      	ldr	r3, [pc, #64]	; (8008670 <MX_USART2_UART_Init+0x4c>)
 8008630:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8008634:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8008636:	4b0e      	ldr	r3, [pc, #56]	; (8008670 <MX_USART2_UART_Init+0x4c>)
 8008638:	2200      	movs	r2, #0
 800863a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800863c:	4b0c      	ldr	r3, [pc, #48]	; (8008670 <MX_USART2_UART_Init+0x4c>)
 800863e:	2200      	movs	r2, #0
 8008640:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8008642:	4b0b      	ldr	r3, [pc, #44]	; (8008670 <MX_USART2_UART_Init+0x4c>)
 8008644:	2200      	movs	r2, #0
 8008646:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8008648:	4b09      	ldr	r3, [pc, #36]	; (8008670 <MX_USART2_UART_Init+0x4c>)
 800864a:	220c      	movs	r2, #12
 800864c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800864e:	4b08      	ldr	r3, [pc, #32]	; (8008670 <MX_USART2_UART_Init+0x4c>)
 8008650:	2200      	movs	r2, #0
 8008652:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8008654:	4b06      	ldr	r3, [pc, #24]	; (8008670 <MX_USART2_UART_Init+0x4c>)
 8008656:	2200      	movs	r2, #0
 8008658:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800865a:	4805      	ldr	r0, [pc, #20]	; (8008670 <MX_USART2_UART_Init+0x4c>)
 800865c:	f001 faec 	bl	8009c38 <HAL_UART_Init>
 8008660:	4603      	mov	r3, r0
 8008662:	2b00      	cmp	r3, #0
 8008664:	d001      	beq.n	800866a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8008666:	f000 f87d 	bl	8008764 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800866a:	bf00      	nop
 800866c:	bd80      	pop	{r7, pc}
 800866e:	bf00      	nop
 8008670:	20000028 	.word	0x20000028
 8008674:	40004400 	.word	0x40004400

08008678 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8008678:	b580      	push	{r7, lr}
 800867a:	b08a      	sub	sp, #40	; 0x28
 800867c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800867e:	f107 0314 	add.w	r3, r7, #20
 8008682:	2200      	movs	r2, #0
 8008684:	601a      	str	r2, [r3, #0]
 8008686:	605a      	str	r2, [r3, #4]
 8008688:	609a      	str	r2, [r3, #8]
 800868a:	60da      	str	r2, [r3, #12]
 800868c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800868e:	2300      	movs	r3, #0
 8008690:	613b      	str	r3, [r7, #16]
 8008692:	4b31      	ldr	r3, [pc, #196]	; (8008758 <MX_GPIO_Init+0xe0>)
 8008694:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008696:	4a30      	ldr	r2, [pc, #192]	; (8008758 <MX_GPIO_Init+0xe0>)
 8008698:	f043 0304 	orr.w	r3, r3, #4
 800869c:	6313      	str	r3, [r2, #48]	; 0x30
 800869e:	4b2e      	ldr	r3, [pc, #184]	; (8008758 <MX_GPIO_Init+0xe0>)
 80086a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80086a2:	f003 0304 	and.w	r3, r3, #4
 80086a6:	613b      	str	r3, [r7, #16]
 80086a8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80086aa:	2300      	movs	r3, #0
 80086ac:	60fb      	str	r3, [r7, #12]
 80086ae:	4b2a      	ldr	r3, [pc, #168]	; (8008758 <MX_GPIO_Init+0xe0>)
 80086b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80086b2:	4a29      	ldr	r2, [pc, #164]	; (8008758 <MX_GPIO_Init+0xe0>)
 80086b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80086b8:	6313      	str	r3, [r2, #48]	; 0x30
 80086ba:	4b27      	ldr	r3, [pc, #156]	; (8008758 <MX_GPIO_Init+0xe0>)
 80086bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80086be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80086c2:	60fb      	str	r3, [r7, #12]
 80086c4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80086c6:	2300      	movs	r3, #0
 80086c8:	60bb      	str	r3, [r7, #8]
 80086ca:	4b23      	ldr	r3, [pc, #140]	; (8008758 <MX_GPIO_Init+0xe0>)
 80086cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80086ce:	4a22      	ldr	r2, [pc, #136]	; (8008758 <MX_GPIO_Init+0xe0>)
 80086d0:	f043 0301 	orr.w	r3, r3, #1
 80086d4:	6313      	str	r3, [r2, #48]	; 0x30
 80086d6:	4b20      	ldr	r3, [pc, #128]	; (8008758 <MX_GPIO_Init+0xe0>)
 80086d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80086da:	f003 0301 	and.w	r3, r3, #1
 80086de:	60bb      	str	r3, [r7, #8]
 80086e0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80086e2:	2300      	movs	r3, #0
 80086e4:	607b      	str	r3, [r7, #4]
 80086e6:	4b1c      	ldr	r3, [pc, #112]	; (8008758 <MX_GPIO_Init+0xe0>)
 80086e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80086ea:	4a1b      	ldr	r2, [pc, #108]	; (8008758 <MX_GPIO_Init+0xe0>)
 80086ec:	f043 0302 	orr.w	r3, r3, #2
 80086f0:	6313      	str	r3, [r2, #48]	; 0x30
 80086f2:	4b19      	ldr	r3, [pc, #100]	; (8008758 <MX_GPIO_Init+0xe0>)
 80086f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80086f6:	f003 0302 	and.w	r3, r3, #2
 80086fa:	607b      	str	r3, [r7, #4]
 80086fc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80086fe:	2200      	movs	r2, #0
 8008700:	2120      	movs	r1, #32
 8008702:	4816      	ldr	r0, [pc, #88]	; (800875c <MX_GPIO_Init+0xe4>)
 8008704:	f000 fc58 	bl	8008fb8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8008708:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800870c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800870e:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8008712:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008714:	2300      	movs	r3, #0
 8008716:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8008718:	f107 0314 	add.w	r3, r7, #20
 800871c:	4619      	mov	r1, r3
 800871e:	4810      	ldr	r0, [pc, #64]	; (8008760 <MX_GPIO_Init+0xe8>)
 8008720:	f000 fab6 	bl	8008c90 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8008724:	2320      	movs	r3, #32
 8008726:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8008728:	2301      	movs	r3, #1
 800872a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800872c:	2300      	movs	r3, #0
 800872e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008730:	2300      	movs	r3, #0
 8008732:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8008734:	f107 0314 	add.w	r3, r7, #20
 8008738:	4619      	mov	r1, r3
 800873a:	4808      	ldr	r0, [pc, #32]	; (800875c <MX_GPIO_Init+0xe4>)
 800873c:	f000 faa8 	bl	8008c90 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8008740:	2200      	movs	r2, #0
 8008742:	2100      	movs	r1, #0
 8008744:	2028      	movs	r0, #40	; 0x28
 8008746:	f000 fa6c 	bl	8008c22 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800874a:	2028      	movs	r0, #40	; 0x28
 800874c:	f000 fa85 	bl	8008c5a <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8008750:	bf00      	nop
 8008752:	3728      	adds	r7, #40	; 0x28
 8008754:	46bd      	mov	sp, r7
 8008756:	bd80      	pop	{r7, pc}
 8008758:	40023800 	.word	0x40023800
 800875c:	40020000 	.word	0x40020000
 8008760:	40020800 	.word	0x40020800

08008764 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8008764:	b480      	push	{r7}
 8008766:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8008768:	b672      	cpsid	i
}
 800876a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800876c:	e7fe      	b.n	800876c <Error_Handler+0x8>
	...

08008770 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8008770:	b580      	push	{r7, lr}
 8008772:	b082      	sub	sp, #8
 8008774:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008776:	2300      	movs	r3, #0
 8008778:	607b      	str	r3, [r7, #4]
 800877a:	4b10      	ldr	r3, [pc, #64]	; (80087bc <HAL_MspInit+0x4c>)
 800877c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800877e:	4a0f      	ldr	r2, [pc, #60]	; (80087bc <HAL_MspInit+0x4c>)
 8008780:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008784:	6453      	str	r3, [r2, #68]	; 0x44
 8008786:	4b0d      	ldr	r3, [pc, #52]	; (80087bc <HAL_MspInit+0x4c>)
 8008788:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800878a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800878e:	607b      	str	r3, [r7, #4]
 8008790:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8008792:	2300      	movs	r3, #0
 8008794:	603b      	str	r3, [r7, #0]
 8008796:	4b09      	ldr	r3, [pc, #36]	; (80087bc <HAL_MspInit+0x4c>)
 8008798:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800879a:	4a08      	ldr	r2, [pc, #32]	; (80087bc <HAL_MspInit+0x4c>)
 800879c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80087a0:	6413      	str	r3, [r2, #64]	; 0x40
 80087a2:	4b06      	ldr	r3, [pc, #24]	; (80087bc <HAL_MspInit+0x4c>)
 80087a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80087a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80087aa:	603b      	str	r3, [r7, #0]
 80087ac:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80087ae:	2007      	movs	r0, #7
 80087b0:	f000 fa2c 	bl	8008c0c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80087b4:	bf00      	nop
 80087b6:	3708      	adds	r7, #8
 80087b8:	46bd      	mov	sp, r7
 80087ba:	bd80      	pop	{r7, pc}
 80087bc:	40023800 	.word	0x40023800

080087c0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80087c0:	b580      	push	{r7, lr}
 80087c2:	b08a      	sub	sp, #40	; 0x28
 80087c4:	af00      	add	r7, sp, #0
 80087c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80087c8:	f107 0314 	add.w	r3, r7, #20
 80087cc:	2200      	movs	r2, #0
 80087ce:	601a      	str	r2, [r3, #0]
 80087d0:	605a      	str	r2, [r3, #4]
 80087d2:	609a      	str	r2, [r3, #8]
 80087d4:	60da      	str	r2, [r3, #12]
 80087d6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	681b      	ldr	r3, [r3, #0]
 80087dc:	4a19      	ldr	r2, [pc, #100]	; (8008844 <HAL_UART_MspInit+0x84>)
 80087de:	4293      	cmp	r3, r2
 80087e0:	d12b      	bne.n	800883a <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80087e2:	2300      	movs	r3, #0
 80087e4:	613b      	str	r3, [r7, #16]
 80087e6:	4b18      	ldr	r3, [pc, #96]	; (8008848 <HAL_UART_MspInit+0x88>)
 80087e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80087ea:	4a17      	ldr	r2, [pc, #92]	; (8008848 <HAL_UART_MspInit+0x88>)
 80087ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80087f0:	6413      	str	r3, [r2, #64]	; 0x40
 80087f2:	4b15      	ldr	r3, [pc, #84]	; (8008848 <HAL_UART_MspInit+0x88>)
 80087f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80087f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80087fa:	613b      	str	r3, [r7, #16]
 80087fc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80087fe:	2300      	movs	r3, #0
 8008800:	60fb      	str	r3, [r7, #12]
 8008802:	4b11      	ldr	r3, [pc, #68]	; (8008848 <HAL_UART_MspInit+0x88>)
 8008804:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008806:	4a10      	ldr	r2, [pc, #64]	; (8008848 <HAL_UART_MspInit+0x88>)
 8008808:	f043 0301 	orr.w	r3, r3, #1
 800880c:	6313      	str	r3, [r2, #48]	; 0x30
 800880e:	4b0e      	ldr	r3, [pc, #56]	; (8008848 <HAL_UART_MspInit+0x88>)
 8008810:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008812:	f003 0301 	and.w	r3, r3, #1
 8008816:	60fb      	str	r3, [r7, #12]
 8008818:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800881a:	230c      	movs	r3, #12
 800881c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800881e:	2302      	movs	r3, #2
 8008820:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008822:	2300      	movs	r3, #0
 8008824:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008826:	2303      	movs	r3, #3
 8008828:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800882a:	2307      	movs	r3, #7
 800882c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800882e:	f107 0314 	add.w	r3, r7, #20
 8008832:	4619      	mov	r1, r3
 8008834:	4805      	ldr	r0, [pc, #20]	; (800884c <HAL_UART_MspInit+0x8c>)
 8008836:	f000 fa2b 	bl	8008c90 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800883a:	bf00      	nop
 800883c:	3728      	adds	r7, #40	; 0x28
 800883e:	46bd      	mov	sp, r7
 8008840:	bd80      	pop	{r7, pc}
 8008842:	bf00      	nop
 8008844:	40004400 	.word	0x40004400
 8008848:	40023800 	.word	0x40023800
 800884c:	40020000 	.word	0x40020000

08008850 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8008850:	b480      	push	{r7}
 8008852:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8008854:	e7fe      	b.n	8008854 <NMI_Handler+0x4>

08008856 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8008856:	b480      	push	{r7}
 8008858:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800885a:	e7fe      	b.n	800885a <HardFault_Handler+0x4>

0800885c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800885c:	b480      	push	{r7}
 800885e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8008860:	e7fe      	b.n	8008860 <MemManage_Handler+0x4>

08008862 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8008862:	b480      	push	{r7}
 8008864:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8008866:	e7fe      	b.n	8008866 <BusFault_Handler+0x4>

08008868 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8008868:	b480      	push	{r7}
 800886a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800886c:	e7fe      	b.n	800886c <UsageFault_Handler+0x4>

0800886e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800886e:	b480      	push	{r7}
 8008870:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8008872:	bf00      	nop
 8008874:	46bd      	mov	sp, r7
 8008876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800887a:	4770      	bx	lr

0800887c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800887c:	b480      	push	{r7}
 800887e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8008880:	bf00      	nop
 8008882:	46bd      	mov	sp, r7
 8008884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008888:	4770      	bx	lr

0800888a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800888a:	b480      	push	{r7}
 800888c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800888e:	bf00      	nop
 8008890:	46bd      	mov	sp, r7
 8008892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008896:	4770      	bx	lr

08008898 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8008898:	b580      	push	{r7, lr}
 800889a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800889c:	f000 f8a2 	bl	80089e4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80088a0:	bf00      	nop
 80088a2:	bd80      	pop	{r7, pc}

080088a4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80088a4:	b580      	push	{r7, lr}
 80088a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

	HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 80088a8:	2120      	movs	r1, #32
 80088aa:	4804      	ldr	r0, [pc, #16]	; (80088bc <EXTI15_10_IRQHandler+0x18>)
 80088ac:	f000 fb9d 	bl	8008fea <HAL_GPIO_TogglePin>


  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 80088b0:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80088b4:	f000 fbb4 	bl	8009020 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80088b8:	bf00      	nop
 80088ba:	bd80      	pop	{r7, pc}
 80088bc:	40020000 	.word	0x40020000

080088c0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80088c0:	b480      	push	{r7}
 80088c2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80088c4:	4b07      	ldr	r3, [pc, #28]	; (80088e4 <SystemInit+0x24>)
 80088c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80088ca:	4a06      	ldr	r2, [pc, #24]	; (80088e4 <SystemInit+0x24>)
 80088cc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80088d0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSRAM || DATA_IN_ExtSDRAM */

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
 80088d4:	4b03      	ldr	r3, [pc, #12]	; (80088e4 <SystemInit+0x24>)
 80088d6:	4a04      	ldr	r2, [pc, #16]	; (80088e8 <SystemInit+0x28>)
 80088d8:	609a      	str	r2, [r3, #8]
#endif /* USER_VECT_TAB_ADDRESS */
}
 80088da:	bf00      	nop
 80088dc:	46bd      	mov	sp, r7
 80088de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088e2:	4770      	bx	lr
 80088e4:	e000ed00 	.word	0xe000ed00
 80088e8:	08008000 	.word	0x08008000

080088ec <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80088ec:	f8df d034 	ldr.w	sp, [pc, #52]	; 8008924 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80088f0:	480d      	ldr	r0, [pc, #52]	; (8008928 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80088f2:	490e      	ldr	r1, [pc, #56]	; (800892c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80088f4:	4a0e      	ldr	r2, [pc, #56]	; (8008930 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80088f6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80088f8:	e002      	b.n	8008900 <LoopCopyDataInit>

080088fa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80088fa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80088fc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80088fe:	3304      	adds	r3, #4

08008900 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8008900:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8008902:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8008904:	d3f9      	bcc.n	80088fa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8008906:	4a0b      	ldr	r2, [pc, #44]	; (8008934 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8008908:	4c0b      	ldr	r4, [pc, #44]	; (8008938 <LoopFillZerobss+0x26>)
  movs r3, #0
 800890a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800890c:	e001      	b.n	8008912 <LoopFillZerobss>

0800890e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800890e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8008910:	3204      	adds	r2, #4

08008912 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8008912:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8008914:	d3fb      	bcc.n	800890e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8008916:	f7ff ffd3 	bl	80088c0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800891a:	f001 fd57 	bl	800a3cc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800891e:	f7ff fdef 	bl	8008500 <main>
  bx  lr    
 8008922:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8008924:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8008928:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800892c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8008930:	0800a46c 	.word	0x0800a46c
  ldr r2, =_sbss
 8008934:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8008938:	20000070 	.word	0x20000070

0800893c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800893c:	e7fe      	b.n	800893c <ADC_IRQHandler>
	...

08008940 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8008940:	b580      	push	{r7, lr}
 8008942:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8008944:	4b0e      	ldr	r3, [pc, #56]	; (8008980 <HAL_Init+0x40>)
 8008946:	681b      	ldr	r3, [r3, #0]
 8008948:	4a0d      	ldr	r2, [pc, #52]	; (8008980 <HAL_Init+0x40>)
 800894a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800894e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8008950:	4b0b      	ldr	r3, [pc, #44]	; (8008980 <HAL_Init+0x40>)
 8008952:	681b      	ldr	r3, [r3, #0]
 8008954:	4a0a      	ldr	r2, [pc, #40]	; (8008980 <HAL_Init+0x40>)
 8008956:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800895a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800895c:	4b08      	ldr	r3, [pc, #32]	; (8008980 <HAL_Init+0x40>)
 800895e:	681b      	ldr	r3, [r3, #0]
 8008960:	4a07      	ldr	r2, [pc, #28]	; (8008980 <HAL_Init+0x40>)
 8008962:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008966:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8008968:	2003      	movs	r0, #3
 800896a:	f000 f94f 	bl	8008c0c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800896e:	2000      	movs	r0, #0
 8008970:	f000 f808 	bl	8008984 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8008974:	f7ff fefc 	bl	8008770 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8008978:	2300      	movs	r3, #0
}
 800897a:	4618      	mov	r0, r3
 800897c:	bd80      	pop	{r7, pc}
 800897e:	bf00      	nop
 8008980:	40023c00 	.word	0x40023c00

08008984 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8008984:	b580      	push	{r7, lr}
 8008986:	b082      	sub	sp, #8
 8008988:	af00      	add	r7, sp, #0
 800898a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800898c:	4b12      	ldr	r3, [pc, #72]	; (80089d8 <HAL_InitTick+0x54>)
 800898e:	681a      	ldr	r2, [r3, #0]
 8008990:	4b12      	ldr	r3, [pc, #72]	; (80089dc <HAL_InitTick+0x58>)
 8008992:	781b      	ldrb	r3, [r3, #0]
 8008994:	4619      	mov	r1, r3
 8008996:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800899a:	fbb3 f3f1 	udiv	r3, r3, r1
 800899e:	fbb2 f3f3 	udiv	r3, r2, r3
 80089a2:	4618      	mov	r0, r3
 80089a4:	f000 f967 	bl	8008c76 <HAL_SYSTICK_Config>
 80089a8:	4603      	mov	r3, r0
 80089aa:	2b00      	cmp	r3, #0
 80089ac:	d001      	beq.n	80089b2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80089ae:	2301      	movs	r3, #1
 80089b0:	e00e      	b.n	80089d0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	2b0f      	cmp	r3, #15
 80089b6:	d80a      	bhi.n	80089ce <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80089b8:	2200      	movs	r2, #0
 80089ba:	6879      	ldr	r1, [r7, #4]
 80089bc:	f04f 30ff 	mov.w	r0, #4294967295
 80089c0:	f000 f92f 	bl	8008c22 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80089c4:	4a06      	ldr	r2, [pc, #24]	; (80089e0 <HAL_InitTick+0x5c>)
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80089ca:	2300      	movs	r3, #0
 80089cc:	e000      	b.n	80089d0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80089ce:	2301      	movs	r3, #1
}
 80089d0:	4618      	mov	r0, r3
 80089d2:	3708      	adds	r7, #8
 80089d4:	46bd      	mov	sp, r7
 80089d6:	bd80      	pop	{r7, pc}
 80089d8:	20000000 	.word	0x20000000
 80089dc:	20000008 	.word	0x20000008
 80089e0:	20000004 	.word	0x20000004

080089e4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80089e4:	b480      	push	{r7}
 80089e6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80089e8:	4b06      	ldr	r3, [pc, #24]	; (8008a04 <HAL_IncTick+0x20>)
 80089ea:	781b      	ldrb	r3, [r3, #0]
 80089ec:	461a      	mov	r2, r3
 80089ee:	4b06      	ldr	r3, [pc, #24]	; (8008a08 <HAL_IncTick+0x24>)
 80089f0:	681b      	ldr	r3, [r3, #0]
 80089f2:	4413      	add	r3, r2
 80089f4:	4a04      	ldr	r2, [pc, #16]	; (8008a08 <HAL_IncTick+0x24>)
 80089f6:	6013      	str	r3, [r2, #0]
}
 80089f8:	bf00      	nop
 80089fa:	46bd      	mov	sp, r7
 80089fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a00:	4770      	bx	lr
 8008a02:	bf00      	nop
 8008a04:	20000008 	.word	0x20000008
 8008a08:	2000006c 	.word	0x2000006c

08008a0c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8008a0c:	b480      	push	{r7}
 8008a0e:	af00      	add	r7, sp, #0
  return uwTick;
 8008a10:	4b03      	ldr	r3, [pc, #12]	; (8008a20 <HAL_GetTick+0x14>)
 8008a12:	681b      	ldr	r3, [r3, #0]
}
 8008a14:	4618      	mov	r0, r3
 8008a16:	46bd      	mov	sp, r7
 8008a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a1c:	4770      	bx	lr
 8008a1e:	bf00      	nop
 8008a20:	2000006c 	.word	0x2000006c

08008a24 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8008a24:	b580      	push	{r7, lr}
 8008a26:	b084      	sub	sp, #16
 8008a28:	af00      	add	r7, sp, #0
 8008a2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8008a2c:	f7ff ffee 	bl	8008a0c <HAL_GetTick>
 8008a30:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8008a36:	68fb      	ldr	r3, [r7, #12]
 8008a38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a3c:	d005      	beq.n	8008a4a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8008a3e:	4b0a      	ldr	r3, [pc, #40]	; (8008a68 <HAL_Delay+0x44>)
 8008a40:	781b      	ldrb	r3, [r3, #0]
 8008a42:	461a      	mov	r2, r3
 8008a44:	68fb      	ldr	r3, [r7, #12]
 8008a46:	4413      	add	r3, r2
 8008a48:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8008a4a:	bf00      	nop
 8008a4c:	f7ff ffde 	bl	8008a0c <HAL_GetTick>
 8008a50:	4602      	mov	r2, r0
 8008a52:	68bb      	ldr	r3, [r7, #8]
 8008a54:	1ad3      	subs	r3, r2, r3
 8008a56:	68fa      	ldr	r2, [r7, #12]
 8008a58:	429a      	cmp	r2, r3
 8008a5a:	d8f7      	bhi.n	8008a4c <HAL_Delay+0x28>
  {
  }
}
 8008a5c:	bf00      	nop
 8008a5e:	bf00      	nop
 8008a60:	3710      	adds	r7, #16
 8008a62:	46bd      	mov	sp, r7
 8008a64:	bd80      	pop	{r7, pc}
 8008a66:	bf00      	nop
 8008a68:	20000008 	.word	0x20000008

08008a6c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8008a6c:	b480      	push	{r7}
 8008a6e:	b085      	sub	sp, #20
 8008a70:	af00      	add	r7, sp, #0
 8008a72:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	f003 0307 	and.w	r3, r3, #7
 8008a7a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8008a7c:	4b0c      	ldr	r3, [pc, #48]	; (8008ab0 <__NVIC_SetPriorityGrouping+0x44>)
 8008a7e:	68db      	ldr	r3, [r3, #12]
 8008a80:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8008a82:	68ba      	ldr	r2, [r7, #8]
 8008a84:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8008a88:	4013      	ands	r3, r2
 8008a8a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8008a8c:	68fb      	ldr	r3, [r7, #12]
 8008a8e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8008a90:	68bb      	ldr	r3, [r7, #8]
 8008a92:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8008a94:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8008a98:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008a9c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8008a9e:	4a04      	ldr	r2, [pc, #16]	; (8008ab0 <__NVIC_SetPriorityGrouping+0x44>)
 8008aa0:	68bb      	ldr	r3, [r7, #8]
 8008aa2:	60d3      	str	r3, [r2, #12]
}
 8008aa4:	bf00      	nop
 8008aa6:	3714      	adds	r7, #20
 8008aa8:	46bd      	mov	sp, r7
 8008aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aae:	4770      	bx	lr
 8008ab0:	e000ed00 	.word	0xe000ed00

08008ab4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8008ab4:	b480      	push	{r7}
 8008ab6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8008ab8:	4b04      	ldr	r3, [pc, #16]	; (8008acc <__NVIC_GetPriorityGrouping+0x18>)
 8008aba:	68db      	ldr	r3, [r3, #12]
 8008abc:	0a1b      	lsrs	r3, r3, #8
 8008abe:	f003 0307 	and.w	r3, r3, #7
}
 8008ac2:	4618      	mov	r0, r3
 8008ac4:	46bd      	mov	sp, r7
 8008ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aca:	4770      	bx	lr
 8008acc:	e000ed00 	.word	0xe000ed00

08008ad0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8008ad0:	b480      	push	{r7}
 8008ad2:	b083      	sub	sp, #12
 8008ad4:	af00      	add	r7, sp, #0
 8008ad6:	4603      	mov	r3, r0
 8008ad8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008ada:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008ade:	2b00      	cmp	r3, #0
 8008ae0:	db0b      	blt.n	8008afa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8008ae2:	79fb      	ldrb	r3, [r7, #7]
 8008ae4:	f003 021f 	and.w	r2, r3, #31
 8008ae8:	4907      	ldr	r1, [pc, #28]	; (8008b08 <__NVIC_EnableIRQ+0x38>)
 8008aea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008aee:	095b      	lsrs	r3, r3, #5
 8008af0:	2001      	movs	r0, #1
 8008af2:	fa00 f202 	lsl.w	r2, r0, r2
 8008af6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8008afa:	bf00      	nop
 8008afc:	370c      	adds	r7, #12
 8008afe:	46bd      	mov	sp, r7
 8008b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b04:	4770      	bx	lr
 8008b06:	bf00      	nop
 8008b08:	e000e100 	.word	0xe000e100

08008b0c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8008b0c:	b480      	push	{r7}
 8008b0e:	b083      	sub	sp, #12
 8008b10:	af00      	add	r7, sp, #0
 8008b12:	4603      	mov	r3, r0
 8008b14:	6039      	str	r1, [r7, #0]
 8008b16:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008b18:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008b1c:	2b00      	cmp	r3, #0
 8008b1e:	db0a      	blt.n	8008b36 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008b20:	683b      	ldr	r3, [r7, #0]
 8008b22:	b2da      	uxtb	r2, r3
 8008b24:	490c      	ldr	r1, [pc, #48]	; (8008b58 <__NVIC_SetPriority+0x4c>)
 8008b26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008b2a:	0112      	lsls	r2, r2, #4
 8008b2c:	b2d2      	uxtb	r2, r2
 8008b2e:	440b      	add	r3, r1
 8008b30:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8008b34:	e00a      	b.n	8008b4c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008b36:	683b      	ldr	r3, [r7, #0]
 8008b38:	b2da      	uxtb	r2, r3
 8008b3a:	4908      	ldr	r1, [pc, #32]	; (8008b5c <__NVIC_SetPriority+0x50>)
 8008b3c:	79fb      	ldrb	r3, [r7, #7]
 8008b3e:	f003 030f 	and.w	r3, r3, #15
 8008b42:	3b04      	subs	r3, #4
 8008b44:	0112      	lsls	r2, r2, #4
 8008b46:	b2d2      	uxtb	r2, r2
 8008b48:	440b      	add	r3, r1
 8008b4a:	761a      	strb	r2, [r3, #24]
}
 8008b4c:	bf00      	nop
 8008b4e:	370c      	adds	r7, #12
 8008b50:	46bd      	mov	sp, r7
 8008b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b56:	4770      	bx	lr
 8008b58:	e000e100 	.word	0xe000e100
 8008b5c:	e000ed00 	.word	0xe000ed00

08008b60 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8008b60:	b480      	push	{r7}
 8008b62:	b089      	sub	sp, #36	; 0x24
 8008b64:	af00      	add	r7, sp, #0
 8008b66:	60f8      	str	r0, [r7, #12]
 8008b68:	60b9      	str	r1, [r7, #8]
 8008b6a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8008b6c:	68fb      	ldr	r3, [r7, #12]
 8008b6e:	f003 0307 	and.w	r3, r3, #7
 8008b72:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8008b74:	69fb      	ldr	r3, [r7, #28]
 8008b76:	f1c3 0307 	rsb	r3, r3, #7
 8008b7a:	2b04      	cmp	r3, #4
 8008b7c:	bf28      	it	cs
 8008b7e:	2304      	movcs	r3, #4
 8008b80:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8008b82:	69fb      	ldr	r3, [r7, #28]
 8008b84:	3304      	adds	r3, #4
 8008b86:	2b06      	cmp	r3, #6
 8008b88:	d902      	bls.n	8008b90 <NVIC_EncodePriority+0x30>
 8008b8a:	69fb      	ldr	r3, [r7, #28]
 8008b8c:	3b03      	subs	r3, #3
 8008b8e:	e000      	b.n	8008b92 <NVIC_EncodePriority+0x32>
 8008b90:	2300      	movs	r3, #0
 8008b92:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008b94:	f04f 32ff 	mov.w	r2, #4294967295
 8008b98:	69bb      	ldr	r3, [r7, #24]
 8008b9a:	fa02 f303 	lsl.w	r3, r2, r3
 8008b9e:	43da      	mvns	r2, r3
 8008ba0:	68bb      	ldr	r3, [r7, #8]
 8008ba2:	401a      	ands	r2, r3
 8008ba4:	697b      	ldr	r3, [r7, #20]
 8008ba6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8008ba8:	f04f 31ff 	mov.w	r1, #4294967295
 8008bac:	697b      	ldr	r3, [r7, #20]
 8008bae:	fa01 f303 	lsl.w	r3, r1, r3
 8008bb2:	43d9      	mvns	r1, r3
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008bb8:	4313      	orrs	r3, r2
         );
}
 8008bba:	4618      	mov	r0, r3
 8008bbc:	3724      	adds	r7, #36	; 0x24
 8008bbe:	46bd      	mov	sp, r7
 8008bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bc4:	4770      	bx	lr
	...

08008bc8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8008bc8:	b580      	push	{r7, lr}
 8008bca:	b082      	sub	sp, #8
 8008bcc:	af00      	add	r7, sp, #0
 8008bce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	3b01      	subs	r3, #1
 8008bd4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8008bd8:	d301      	bcc.n	8008bde <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8008bda:	2301      	movs	r3, #1
 8008bdc:	e00f      	b.n	8008bfe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8008bde:	4a0a      	ldr	r2, [pc, #40]	; (8008c08 <SysTick_Config+0x40>)
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	3b01      	subs	r3, #1
 8008be4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8008be6:	210f      	movs	r1, #15
 8008be8:	f04f 30ff 	mov.w	r0, #4294967295
 8008bec:	f7ff ff8e 	bl	8008b0c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8008bf0:	4b05      	ldr	r3, [pc, #20]	; (8008c08 <SysTick_Config+0x40>)
 8008bf2:	2200      	movs	r2, #0
 8008bf4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8008bf6:	4b04      	ldr	r3, [pc, #16]	; (8008c08 <SysTick_Config+0x40>)
 8008bf8:	2207      	movs	r2, #7
 8008bfa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8008bfc:	2300      	movs	r3, #0
}
 8008bfe:	4618      	mov	r0, r3
 8008c00:	3708      	adds	r7, #8
 8008c02:	46bd      	mov	sp, r7
 8008c04:	bd80      	pop	{r7, pc}
 8008c06:	bf00      	nop
 8008c08:	e000e010 	.word	0xe000e010

08008c0c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8008c0c:	b580      	push	{r7, lr}
 8008c0e:	b082      	sub	sp, #8
 8008c10:	af00      	add	r7, sp, #0
 8008c12:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8008c14:	6878      	ldr	r0, [r7, #4]
 8008c16:	f7ff ff29 	bl	8008a6c <__NVIC_SetPriorityGrouping>
}
 8008c1a:	bf00      	nop
 8008c1c:	3708      	adds	r7, #8
 8008c1e:	46bd      	mov	sp, r7
 8008c20:	bd80      	pop	{r7, pc}

08008c22 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8008c22:	b580      	push	{r7, lr}
 8008c24:	b086      	sub	sp, #24
 8008c26:	af00      	add	r7, sp, #0
 8008c28:	4603      	mov	r3, r0
 8008c2a:	60b9      	str	r1, [r7, #8]
 8008c2c:	607a      	str	r2, [r7, #4]
 8008c2e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8008c30:	2300      	movs	r3, #0
 8008c32:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8008c34:	f7ff ff3e 	bl	8008ab4 <__NVIC_GetPriorityGrouping>
 8008c38:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8008c3a:	687a      	ldr	r2, [r7, #4]
 8008c3c:	68b9      	ldr	r1, [r7, #8]
 8008c3e:	6978      	ldr	r0, [r7, #20]
 8008c40:	f7ff ff8e 	bl	8008b60 <NVIC_EncodePriority>
 8008c44:	4602      	mov	r2, r0
 8008c46:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008c4a:	4611      	mov	r1, r2
 8008c4c:	4618      	mov	r0, r3
 8008c4e:	f7ff ff5d 	bl	8008b0c <__NVIC_SetPriority>
}
 8008c52:	bf00      	nop
 8008c54:	3718      	adds	r7, #24
 8008c56:	46bd      	mov	sp, r7
 8008c58:	bd80      	pop	{r7, pc}

08008c5a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8008c5a:	b580      	push	{r7, lr}
 8008c5c:	b082      	sub	sp, #8
 8008c5e:	af00      	add	r7, sp, #0
 8008c60:	4603      	mov	r3, r0
 8008c62:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8008c64:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008c68:	4618      	mov	r0, r3
 8008c6a:	f7ff ff31 	bl	8008ad0 <__NVIC_EnableIRQ>
}
 8008c6e:	bf00      	nop
 8008c70:	3708      	adds	r7, #8
 8008c72:	46bd      	mov	sp, r7
 8008c74:	bd80      	pop	{r7, pc}

08008c76 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8008c76:	b580      	push	{r7, lr}
 8008c78:	b082      	sub	sp, #8
 8008c7a:	af00      	add	r7, sp, #0
 8008c7c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8008c7e:	6878      	ldr	r0, [r7, #4]
 8008c80:	f7ff ffa2 	bl	8008bc8 <SysTick_Config>
 8008c84:	4603      	mov	r3, r0
}
 8008c86:	4618      	mov	r0, r3
 8008c88:	3708      	adds	r7, #8
 8008c8a:	46bd      	mov	sp, r7
 8008c8c:	bd80      	pop	{r7, pc}
	...

08008c90 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8008c90:	b480      	push	{r7}
 8008c92:	b089      	sub	sp, #36	; 0x24
 8008c94:	af00      	add	r7, sp, #0
 8008c96:	6078      	str	r0, [r7, #4]
 8008c98:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8008c9a:	2300      	movs	r3, #0
 8008c9c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8008c9e:	2300      	movs	r3, #0
 8008ca0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8008ca2:	2300      	movs	r3, #0
 8008ca4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8008ca6:	2300      	movs	r3, #0
 8008ca8:	61fb      	str	r3, [r7, #28]
 8008caa:	e165      	b.n	8008f78 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8008cac:	2201      	movs	r2, #1
 8008cae:	69fb      	ldr	r3, [r7, #28]
 8008cb0:	fa02 f303 	lsl.w	r3, r2, r3
 8008cb4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8008cb6:	683b      	ldr	r3, [r7, #0]
 8008cb8:	681b      	ldr	r3, [r3, #0]
 8008cba:	697a      	ldr	r2, [r7, #20]
 8008cbc:	4013      	ands	r3, r2
 8008cbe:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8008cc0:	693a      	ldr	r2, [r7, #16]
 8008cc2:	697b      	ldr	r3, [r7, #20]
 8008cc4:	429a      	cmp	r2, r3
 8008cc6:	f040 8154 	bne.w	8008f72 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8008cca:	683b      	ldr	r3, [r7, #0]
 8008ccc:	685b      	ldr	r3, [r3, #4]
 8008cce:	f003 0303 	and.w	r3, r3, #3
 8008cd2:	2b01      	cmp	r3, #1
 8008cd4:	d005      	beq.n	8008ce2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8008cd6:	683b      	ldr	r3, [r7, #0]
 8008cd8:	685b      	ldr	r3, [r3, #4]
 8008cda:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8008cde:	2b02      	cmp	r3, #2
 8008ce0:	d130      	bne.n	8008d44 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	689b      	ldr	r3, [r3, #8]
 8008ce6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8008ce8:	69fb      	ldr	r3, [r7, #28]
 8008cea:	005b      	lsls	r3, r3, #1
 8008cec:	2203      	movs	r2, #3
 8008cee:	fa02 f303 	lsl.w	r3, r2, r3
 8008cf2:	43db      	mvns	r3, r3
 8008cf4:	69ba      	ldr	r2, [r7, #24]
 8008cf6:	4013      	ands	r3, r2
 8008cf8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8008cfa:	683b      	ldr	r3, [r7, #0]
 8008cfc:	68da      	ldr	r2, [r3, #12]
 8008cfe:	69fb      	ldr	r3, [r7, #28]
 8008d00:	005b      	lsls	r3, r3, #1
 8008d02:	fa02 f303 	lsl.w	r3, r2, r3
 8008d06:	69ba      	ldr	r2, [r7, #24]
 8008d08:	4313      	orrs	r3, r2
 8008d0a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	69ba      	ldr	r2, [r7, #24]
 8008d10:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	685b      	ldr	r3, [r3, #4]
 8008d16:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8008d18:	2201      	movs	r2, #1
 8008d1a:	69fb      	ldr	r3, [r7, #28]
 8008d1c:	fa02 f303 	lsl.w	r3, r2, r3
 8008d20:	43db      	mvns	r3, r3
 8008d22:	69ba      	ldr	r2, [r7, #24]
 8008d24:	4013      	ands	r3, r2
 8008d26:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8008d28:	683b      	ldr	r3, [r7, #0]
 8008d2a:	685b      	ldr	r3, [r3, #4]
 8008d2c:	091b      	lsrs	r3, r3, #4
 8008d2e:	f003 0201 	and.w	r2, r3, #1
 8008d32:	69fb      	ldr	r3, [r7, #28]
 8008d34:	fa02 f303 	lsl.w	r3, r2, r3
 8008d38:	69ba      	ldr	r2, [r7, #24]
 8008d3a:	4313      	orrs	r3, r2
 8008d3c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	69ba      	ldr	r2, [r7, #24]
 8008d42:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8008d44:	683b      	ldr	r3, [r7, #0]
 8008d46:	685b      	ldr	r3, [r3, #4]
 8008d48:	f003 0303 	and.w	r3, r3, #3
 8008d4c:	2b03      	cmp	r3, #3
 8008d4e:	d017      	beq.n	8008d80 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	68db      	ldr	r3, [r3, #12]
 8008d54:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8008d56:	69fb      	ldr	r3, [r7, #28]
 8008d58:	005b      	lsls	r3, r3, #1
 8008d5a:	2203      	movs	r2, #3
 8008d5c:	fa02 f303 	lsl.w	r3, r2, r3
 8008d60:	43db      	mvns	r3, r3
 8008d62:	69ba      	ldr	r2, [r7, #24]
 8008d64:	4013      	ands	r3, r2
 8008d66:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8008d68:	683b      	ldr	r3, [r7, #0]
 8008d6a:	689a      	ldr	r2, [r3, #8]
 8008d6c:	69fb      	ldr	r3, [r7, #28]
 8008d6e:	005b      	lsls	r3, r3, #1
 8008d70:	fa02 f303 	lsl.w	r3, r2, r3
 8008d74:	69ba      	ldr	r2, [r7, #24]
 8008d76:	4313      	orrs	r3, r2
 8008d78:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	69ba      	ldr	r2, [r7, #24]
 8008d7e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8008d80:	683b      	ldr	r3, [r7, #0]
 8008d82:	685b      	ldr	r3, [r3, #4]
 8008d84:	f003 0303 	and.w	r3, r3, #3
 8008d88:	2b02      	cmp	r3, #2
 8008d8a:	d123      	bne.n	8008dd4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8008d8c:	69fb      	ldr	r3, [r7, #28]
 8008d8e:	08da      	lsrs	r2, r3, #3
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	3208      	adds	r2, #8
 8008d94:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008d98:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8008d9a:	69fb      	ldr	r3, [r7, #28]
 8008d9c:	f003 0307 	and.w	r3, r3, #7
 8008da0:	009b      	lsls	r3, r3, #2
 8008da2:	220f      	movs	r2, #15
 8008da4:	fa02 f303 	lsl.w	r3, r2, r3
 8008da8:	43db      	mvns	r3, r3
 8008daa:	69ba      	ldr	r2, [r7, #24]
 8008dac:	4013      	ands	r3, r2
 8008dae:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8008db0:	683b      	ldr	r3, [r7, #0]
 8008db2:	691a      	ldr	r2, [r3, #16]
 8008db4:	69fb      	ldr	r3, [r7, #28]
 8008db6:	f003 0307 	and.w	r3, r3, #7
 8008dba:	009b      	lsls	r3, r3, #2
 8008dbc:	fa02 f303 	lsl.w	r3, r2, r3
 8008dc0:	69ba      	ldr	r2, [r7, #24]
 8008dc2:	4313      	orrs	r3, r2
 8008dc4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8008dc6:	69fb      	ldr	r3, [r7, #28]
 8008dc8:	08da      	lsrs	r2, r3, #3
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	3208      	adds	r2, #8
 8008dce:	69b9      	ldr	r1, [r7, #24]
 8008dd0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	681b      	ldr	r3, [r3, #0]
 8008dd8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8008dda:	69fb      	ldr	r3, [r7, #28]
 8008ddc:	005b      	lsls	r3, r3, #1
 8008dde:	2203      	movs	r2, #3
 8008de0:	fa02 f303 	lsl.w	r3, r2, r3
 8008de4:	43db      	mvns	r3, r3
 8008de6:	69ba      	ldr	r2, [r7, #24]
 8008de8:	4013      	ands	r3, r2
 8008dea:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8008dec:	683b      	ldr	r3, [r7, #0]
 8008dee:	685b      	ldr	r3, [r3, #4]
 8008df0:	f003 0203 	and.w	r2, r3, #3
 8008df4:	69fb      	ldr	r3, [r7, #28]
 8008df6:	005b      	lsls	r3, r3, #1
 8008df8:	fa02 f303 	lsl.w	r3, r2, r3
 8008dfc:	69ba      	ldr	r2, [r7, #24]
 8008dfe:	4313      	orrs	r3, r2
 8008e00:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	69ba      	ldr	r2, [r7, #24]
 8008e06:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8008e08:	683b      	ldr	r3, [r7, #0]
 8008e0a:	685b      	ldr	r3, [r3, #4]
 8008e0c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8008e10:	2b00      	cmp	r3, #0
 8008e12:	f000 80ae 	beq.w	8008f72 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008e16:	2300      	movs	r3, #0
 8008e18:	60fb      	str	r3, [r7, #12]
 8008e1a:	4b5d      	ldr	r3, [pc, #372]	; (8008f90 <HAL_GPIO_Init+0x300>)
 8008e1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008e1e:	4a5c      	ldr	r2, [pc, #368]	; (8008f90 <HAL_GPIO_Init+0x300>)
 8008e20:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008e24:	6453      	str	r3, [r2, #68]	; 0x44
 8008e26:	4b5a      	ldr	r3, [pc, #360]	; (8008f90 <HAL_GPIO_Init+0x300>)
 8008e28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008e2a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008e2e:	60fb      	str	r3, [r7, #12]
 8008e30:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8008e32:	4a58      	ldr	r2, [pc, #352]	; (8008f94 <HAL_GPIO_Init+0x304>)
 8008e34:	69fb      	ldr	r3, [r7, #28]
 8008e36:	089b      	lsrs	r3, r3, #2
 8008e38:	3302      	adds	r3, #2
 8008e3a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008e3e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8008e40:	69fb      	ldr	r3, [r7, #28]
 8008e42:	f003 0303 	and.w	r3, r3, #3
 8008e46:	009b      	lsls	r3, r3, #2
 8008e48:	220f      	movs	r2, #15
 8008e4a:	fa02 f303 	lsl.w	r3, r2, r3
 8008e4e:	43db      	mvns	r3, r3
 8008e50:	69ba      	ldr	r2, [r7, #24]
 8008e52:	4013      	ands	r3, r2
 8008e54:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	4a4f      	ldr	r2, [pc, #316]	; (8008f98 <HAL_GPIO_Init+0x308>)
 8008e5a:	4293      	cmp	r3, r2
 8008e5c:	d025      	beq.n	8008eaa <HAL_GPIO_Init+0x21a>
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	4a4e      	ldr	r2, [pc, #312]	; (8008f9c <HAL_GPIO_Init+0x30c>)
 8008e62:	4293      	cmp	r3, r2
 8008e64:	d01f      	beq.n	8008ea6 <HAL_GPIO_Init+0x216>
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	4a4d      	ldr	r2, [pc, #308]	; (8008fa0 <HAL_GPIO_Init+0x310>)
 8008e6a:	4293      	cmp	r3, r2
 8008e6c:	d019      	beq.n	8008ea2 <HAL_GPIO_Init+0x212>
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	4a4c      	ldr	r2, [pc, #304]	; (8008fa4 <HAL_GPIO_Init+0x314>)
 8008e72:	4293      	cmp	r3, r2
 8008e74:	d013      	beq.n	8008e9e <HAL_GPIO_Init+0x20e>
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	4a4b      	ldr	r2, [pc, #300]	; (8008fa8 <HAL_GPIO_Init+0x318>)
 8008e7a:	4293      	cmp	r3, r2
 8008e7c:	d00d      	beq.n	8008e9a <HAL_GPIO_Init+0x20a>
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	4a4a      	ldr	r2, [pc, #296]	; (8008fac <HAL_GPIO_Init+0x31c>)
 8008e82:	4293      	cmp	r3, r2
 8008e84:	d007      	beq.n	8008e96 <HAL_GPIO_Init+0x206>
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	4a49      	ldr	r2, [pc, #292]	; (8008fb0 <HAL_GPIO_Init+0x320>)
 8008e8a:	4293      	cmp	r3, r2
 8008e8c:	d101      	bne.n	8008e92 <HAL_GPIO_Init+0x202>
 8008e8e:	2306      	movs	r3, #6
 8008e90:	e00c      	b.n	8008eac <HAL_GPIO_Init+0x21c>
 8008e92:	2307      	movs	r3, #7
 8008e94:	e00a      	b.n	8008eac <HAL_GPIO_Init+0x21c>
 8008e96:	2305      	movs	r3, #5
 8008e98:	e008      	b.n	8008eac <HAL_GPIO_Init+0x21c>
 8008e9a:	2304      	movs	r3, #4
 8008e9c:	e006      	b.n	8008eac <HAL_GPIO_Init+0x21c>
 8008e9e:	2303      	movs	r3, #3
 8008ea0:	e004      	b.n	8008eac <HAL_GPIO_Init+0x21c>
 8008ea2:	2302      	movs	r3, #2
 8008ea4:	e002      	b.n	8008eac <HAL_GPIO_Init+0x21c>
 8008ea6:	2301      	movs	r3, #1
 8008ea8:	e000      	b.n	8008eac <HAL_GPIO_Init+0x21c>
 8008eaa:	2300      	movs	r3, #0
 8008eac:	69fa      	ldr	r2, [r7, #28]
 8008eae:	f002 0203 	and.w	r2, r2, #3
 8008eb2:	0092      	lsls	r2, r2, #2
 8008eb4:	4093      	lsls	r3, r2
 8008eb6:	69ba      	ldr	r2, [r7, #24]
 8008eb8:	4313      	orrs	r3, r2
 8008eba:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8008ebc:	4935      	ldr	r1, [pc, #212]	; (8008f94 <HAL_GPIO_Init+0x304>)
 8008ebe:	69fb      	ldr	r3, [r7, #28]
 8008ec0:	089b      	lsrs	r3, r3, #2
 8008ec2:	3302      	adds	r3, #2
 8008ec4:	69ba      	ldr	r2, [r7, #24]
 8008ec6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8008eca:	4b3a      	ldr	r3, [pc, #232]	; (8008fb4 <HAL_GPIO_Init+0x324>)
 8008ecc:	689b      	ldr	r3, [r3, #8]
 8008ece:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008ed0:	693b      	ldr	r3, [r7, #16]
 8008ed2:	43db      	mvns	r3, r3
 8008ed4:	69ba      	ldr	r2, [r7, #24]
 8008ed6:	4013      	ands	r3, r2
 8008ed8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8008eda:	683b      	ldr	r3, [r7, #0]
 8008edc:	685b      	ldr	r3, [r3, #4]
 8008ede:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008ee2:	2b00      	cmp	r3, #0
 8008ee4:	d003      	beq.n	8008eee <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8008ee6:	69ba      	ldr	r2, [r7, #24]
 8008ee8:	693b      	ldr	r3, [r7, #16]
 8008eea:	4313      	orrs	r3, r2
 8008eec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8008eee:	4a31      	ldr	r2, [pc, #196]	; (8008fb4 <HAL_GPIO_Init+0x324>)
 8008ef0:	69bb      	ldr	r3, [r7, #24]
 8008ef2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8008ef4:	4b2f      	ldr	r3, [pc, #188]	; (8008fb4 <HAL_GPIO_Init+0x324>)
 8008ef6:	68db      	ldr	r3, [r3, #12]
 8008ef8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008efa:	693b      	ldr	r3, [r7, #16]
 8008efc:	43db      	mvns	r3, r3
 8008efe:	69ba      	ldr	r2, [r7, #24]
 8008f00:	4013      	ands	r3, r2
 8008f02:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8008f04:	683b      	ldr	r3, [r7, #0]
 8008f06:	685b      	ldr	r3, [r3, #4]
 8008f08:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008f0c:	2b00      	cmp	r3, #0
 8008f0e:	d003      	beq.n	8008f18 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8008f10:	69ba      	ldr	r2, [r7, #24]
 8008f12:	693b      	ldr	r3, [r7, #16]
 8008f14:	4313      	orrs	r3, r2
 8008f16:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8008f18:	4a26      	ldr	r2, [pc, #152]	; (8008fb4 <HAL_GPIO_Init+0x324>)
 8008f1a:	69bb      	ldr	r3, [r7, #24]
 8008f1c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8008f1e:	4b25      	ldr	r3, [pc, #148]	; (8008fb4 <HAL_GPIO_Init+0x324>)
 8008f20:	685b      	ldr	r3, [r3, #4]
 8008f22:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008f24:	693b      	ldr	r3, [r7, #16]
 8008f26:	43db      	mvns	r3, r3
 8008f28:	69ba      	ldr	r2, [r7, #24]
 8008f2a:	4013      	ands	r3, r2
 8008f2c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8008f2e:	683b      	ldr	r3, [r7, #0]
 8008f30:	685b      	ldr	r3, [r3, #4]
 8008f32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008f36:	2b00      	cmp	r3, #0
 8008f38:	d003      	beq.n	8008f42 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8008f3a:	69ba      	ldr	r2, [r7, #24]
 8008f3c:	693b      	ldr	r3, [r7, #16]
 8008f3e:	4313      	orrs	r3, r2
 8008f40:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8008f42:	4a1c      	ldr	r2, [pc, #112]	; (8008fb4 <HAL_GPIO_Init+0x324>)
 8008f44:	69bb      	ldr	r3, [r7, #24]
 8008f46:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8008f48:	4b1a      	ldr	r3, [pc, #104]	; (8008fb4 <HAL_GPIO_Init+0x324>)
 8008f4a:	681b      	ldr	r3, [r3, #0]
 8008f4c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008f4e:	693b      	ldr	r3, [r7, #16]
 8008f50:	43db      	mvns	r3, r3
 8008f52:	69ba      	ldr	r2, [r7, #24]
 8008f54:	4013      	ands	r3, r2
 8008f56:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8008f58:	683b      	ldr	r3, [r7, #0]
 8008f5a:	685b      	ldr	r3, [r3, #4]
 8008f5c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008f60:	2b00      	cmp	r3, #0
 8008f62:	d003      	beq.n	8008f6c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8008f64:	69ba      	ldr	r2, [r7, #24]
 8008f66:	693b      	ldr	r3, [r7, #16]
 8008f68:	4313      	orrs	r3, r2
 8008f6a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8008f6c:	4a11      	ldr	r2, [pc, #68]	; (8008fb4 <HAL_GPIO_Init+0x324>)
 8008f6e:	69bb      	ldr	r3, [r7, #24]
 8008f70:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8008f72:	69fb      	ldr	r3, [r7, #28]
 8008f74:	3301      	adds	r3, #1
 8008f76:	61fb      	str	r3, [r7, #28]
 8008f78:	69fb      	ldr	r3, [r7, #28]
 8008f7a:	2b0f      	cmp	r3, #15
 8008f7c:	f67f ae96 	bls.w	8008cac <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8008f80:	bf00      	nop
 8008f82:	bf00      	nop
 8008f84:	3724      	adds	r7, #36	; 0x24
 8008f86:	46bd      	mov	sp, r7
 8008f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f8c:	4770      	bx	lr
 8008f8e:	bf00      	nop
 8008f90:	40023800 	.word	0x40023800
 8008f94:	40013800 	.word	0x40013800
 8008f98:	40020000 	.word	0x40020000
 8008f9c:	40020400 	.word	0x40020400
 8008fa0:	40020800 	.word	0x40020800
 8008fa4:	40020c00 	.word	0x40020c00
 8008fa8:	40021000 	.word	0x40021000
 8008fac:	40021400 	.word	0x40021400
 8008fb0:	40021800 	.word	0x40021800
 8008fb4:	40013c00 	.word	0x40013c00

08008fb8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8008fb8:	b480      	push	{r7}
 8008fba:	b083      	sub	sp, #12
 8008fbc:	af00      	add	r7, sp, #0
 8008fbe:	6078      	str	r0, [r7, #4]
 8008fc0:	460b      	mov	r3, r1
 8008fc2:	807b      	strh	r3, [r7, #2]
 8008fc4:	4613      	mov	r3, r2
 8008fc6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8008fc8:	787b      	ldrb	r3, [r7, #1]
 8008fca:	2b00      	cmp	r3, #0
 8008fcc:	d003      	beq.n	8008fd6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8008fce:	887a      	ldrh	r2, [r7, #2]
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8008fd4:	e003      	b.n	8008fde <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8008fd6:	887b      	ldrh	r3, [r7, #2]
 8008fd8:	041a      	lsls	r2, r3, #16
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	619a      	str	r2, [r3, #24]
}
 8008fde:	bf00      	nop
 8008fe0:	370c      	adds	r7, #12
 8008fe2:	46bd      	mov	sp, r7
 8008fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fe8:	4770      	bx	lr

08008fea <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8008fea:	b480      	push	{r7}
 8008fec:	b085      	sub	sp, #20
 8008fee:	af00      	add	r7, sp, #0
 8008ff0:	6078      	str	r0, [r7, #4]
 8008ff2:	460b      	mov	r3, r1
 8008ff4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	695b      	ldr	r3, [r3, #20]
 8008ffa:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8008ffc:	887a      	ldrh	r2, [r7, #2]
 8008ffe:	68fb      	ldr	r3, [r7, #12]
 8009000:	4013      	ands	r3, r2
 8009002:	041a      	lsls	r2, r3, #16
 8009004:	68fb      	ldr	r3, [r7, #12]
 8009006:	43d9      	mvns	r1, r3
 8009008:	887b      	ldrh	r3, [r7, #2]
 800900a:	400b      	ands	r3, r1
 800900c:	431a      	orrs	r2, r3
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	619a      	str	r2, [r3, #24]
}
 8009012:	bf00      	nop
 8009014:	3714      	adds	r7, #20
 8009016:	46bd      	mov	sp, r7
 8009018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800901c:	4770      	bx	lr
	...

08009020 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8009020:	b580      	push	{r7, lr}
 8009022:	b082      	sub	sp, #8
 8009024:	af00      	add	r7, sp, #0
 8009026:	4603      	mov	r3, r0
 8009028:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800902a:	4b08      	ldr	r3, [pc, #32]	; (800904c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800902c:	695a      	ldr	r2, [r3, #20]
 800902e:	88fb      	ldrh	r3, [r7, #6]
 8009030:	4013      	ands	r3, r2
 8009032:	2b00      	cmp	r3, #0
 8009034:	d006      	beq.n	8009044 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8009036:	4a05      	ldr	r2, [pc, #20]	; (800904c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8009038:	88fb      	ldrh	r3, [r7, #6]
 800903a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800903c:	88fb      	ldrh	r3, [r7, #6]
 800903e:	4618      	mov	r0, r3
 8009040:	f000 f806 	bl	8009050 <HAL_GPIO_EXTI_Callback>
  }
}
 8009044:	bf00      	nop
 8009046:	3708      	adds	r7, #8
 8009048:	46bd      	mov	sp, r7
 800904a:	bd80      	pop	{r7, pc}
 800904c:	40013c00 	.word	0x40013c00

08009050 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8009050:	b480      	push	{r7}
 8009052:	b083      	sub	sp, #12
 8009054:	af00      	add	r7, sp, #0
 8009056:	4603      	mov	r3, r0
 8009058:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800905a:	bf00      	nop
 800905c:	370c      	adds	r7, #12
 800905e:	46bd      	mov	sp, r7
 8009060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009064:	4770      	bx	lr
	...

08009068 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8009068:	b580      	push	{r7, lr}
 800906a:	b084      	sub	sp, #16
 800906c:	af00      	add	r7, sp, #0
 800906e:	6078      	str	r0, [r7, #4]
 8009070:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	2b00      	cmp	r3, #0
 8009076:	d101      	bne.n	800907c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8009078:	2301      	movs	r3, #1
 800907a:	e0cc      	b.n	8009216 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800907c:	4b68      	ldr	r3, [pc, #416]	; (8009220 <HAL_RCC_ClockConfig+0x1b8>)
 800907e:	681b      	ldr	r3, [r3, #0]
 8009080:	f003 030f 	and.w	r3, r3, #15
 8009084:	683a      	ldr	r2, [r7, #0]
 8009086:	429a      	cmp	r2, r3
 8009088:	d90c      	bls.n	80090a4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800908a:	4b65      	ldr	r3, [pc, #404]	; (8009220 <HAL_RCC_ClockConfig+0x1b8>)
 800908c:	683a      	ldr	r2, [r7, #0]
 800908e:	b2d2      	uxtb	r2, r2
 8009090:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8009092:	4b63      	ldr	r3, [pc, #396]	; (8009220 <HAL_RCC_ClockConfig+0x1b8>)
 8009094:	681b      	ldr	r3, [r3, #0]
 8009096:	f003 030f 	and.w	r3, r3, #15
 800909a:	683a      	ldr	r2, [r7, #0]
 800909c:	429a      	cmp	r2, r3
 800909e:	d001      	beq.n	80090a4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80090a0:	2301      	movs	r3, #1
 80090a2:	e0b8      	b.n	8009216 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	681b      	ldr	r3, [r3, #0]
 80090a8:	f003 0302 	and.w	r3, r3, #2
 80090ac:	2b00      	cmp	r3, #0
 80090ae:	d020      	beq.n	80090f2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	681b      	ldr	r3, [r3, #0]
 80090b4:	f003 0304 	and.w	r3, r3, #4
 80090b8:	2b00      	cmp	r3, #0
 80090ba:	d005      	beq.n	80090c8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80090bc:	4b59      	ldr	r3, [pc, #356]	; (8009224 <HAL_RCC_ClockConfig+0x1bc>)
 80090be:	689b      	ldr	r3, [r3, #8]
 80090c0:	4a58      	ldr	r2, [pc, #352]	; (8009224 <HAL_RCC_ClockConfig+0x1bc>)
 80090c2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80090c6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	681b      	ldr	r3, [r3, #0]
 80090cc:	f003 0308 	and.w	r3, r3, #8
 80090d0:	2b00      	cmp	r3, #0
 80090d2:	d005      	beq.n	80090e0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80090d4:	4b53      	ldr	r3, [pc, #332]	; (8009224 <HAL_RCC_ClockConfig+0x1bc>)
 80090d6:	689b      	ldr	r3, [r3, #8]
 80090d8:	4a52      	ldr	r2, [pc, #328]	; (8009224 <HAL_RCC_ClockConfig+0x1bc>)
 80090da:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80090de:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80090e0:	4b50      	ldr	r3, [pc, #320]	; (8009224 <HAL_RCC_ClockConfig+0x1bc>)
 80090e2:	689b      	ldr	r3, [r3, #8]
 80090e4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	689b      	ldr	r3, [r3, #8]
 80090ec:	494d      	ldr	r1, [pc, #308]	; (8009224 <HAL_RCC_ClockConfig+0x1bc>)
 80090ee:	4313      	orrs	r3, r2
 80090f0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	681b      	ldr	r3, [r3, #0]
 80090f6:	f003 0301 	and.w	r3, r3, #1
 80090fa:	2b00      	cmp	r3, #0
 80090fc:	d044      	beq.n	8009188 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	685b      	ldr	r3, [r3, #4]
 8009102:	2b01      	cmp	r3, #1
 8009104:	d107      	bne.n	8009116 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009106:	4b47      	ldr	r3, [pc, #284]	; (8009224 <HAL_RCC_ClockConfig+0x1bc>)
 8009108:	681b      	ldr	r3, [r3, #0]
 800910a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800910e:	2b00      	cmp	r3, #0
 8009110:	d119      	bne.n	8009146 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8009112:	2301      	movs	r3, #1
 8009114:	e07f      	b.n	8009216 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	685b      	ldr	r3, [r3, #4]
 800911a:	2b02      	cmp	r3, #2
 800911c:	d003      	beq.n	8009126 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8009122:	2b03      	cmp	r3, #3
 8009124:	d107      	bne.n	8009136 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009126:	4b3f      	ldr	r3, [pc, #252]	; (8009224 <HAL_RCC_ClockConfig+0x1bc>)
 8009128:	681b      	ldr	r3, [r3, #0]
 800912a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800912e:	2b00      	cmp	r3, #0
 8009130:	d109      	bne.n	8009146 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8009132:	2301      	movs	r3, #1
 8009134:	e06f      	b.n	8009216 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009136:	4b3b      	ldr	r3, [pc, #236]	; (8009224 <HAL_RCC_ClockConfig+0x1bc>)
 8009138:	681b      	ldr	r3, [r3, #0]
 800913a:	f003 0302 	and.w	r3, r3, #2
 800913e:	2b00      	cmp	r3, #0
 8009140:	d101      	bne.n	8009146 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8009142:	2301      	movs	r3, #1
 8009144:	e067      	b.n	8009216 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8009146:	4b37      	ldr	r3, [pc, #220]	; (8009224 <HAL_RCC_ClockConfig+0x1bc>)
 8009148:	689b      	ldr	r3, [r3, #8]
 800914a:	f023 0203 	bic.w	r2, r3, #3
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	685b      	ldr	r3, [r3, #4]
 8009152:	4934      	ldr	r1, [pc, #208]	; (8009224 <HAL_RCC_ClockConfig+0x1bc>)
 8009154:	4313      	orrs	r3, r2
 8009156:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8009158:	f7ff fc58 	bl	8008a0c <HAL_GetTick>
 800915c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800915e:	e00a      	b.n	8009176 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009160:	f7ff fc54 	bl	8008a0c <HAL_GetTick>
 8009164:	4602      	mov	r2, r0
 8009166:	68fb      	ldr	r3, [r7, #12]
 8009168:	1ad3      	subs	r3, r2, r3
 800916a:	f241 3288 	movw	r2, #5000	; 0x1388
 800916e:	4293      	cmp	r3, r2
 8009170:	d901      	bls.n	8009176 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8009172:	2303      	movs	r3, #3
 8009174:	e04f      	b.n	8009216 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009176:	4b2b      	ldr	r3, [pc, #172]	; (8009224 <HAL_RCC_ClockConfig+0x1bc>)
 8009178:	689b      	ldr	r3, [r3, #8]
 800917a:	f003 020c 	and.w	r2, r3, #12
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	685b      	ldr	r3, [r3, #4]
 8009182:	009b      	lsls	r3, r3, #2
 8009184:	429a      	cmp	r2, r3
 8009186:	d1eb      	bne.n	8009160 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8009188:	4b25      	ldr	r3, [pc, #148]	; (8009220 <HAL_RCC_ClockConfig+0x1b8>)
 800918a:	681b      	ldr	r3, [r3, #0]
 800918c:	f003 030f 	and.w	r3, r3, #15
 8009190:	683a      	ldr	r2, [r7, #0]
 8009192:	429a      	cmp	r2, r3
 8009194:	d20c      	bcs.n	80091b0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009196:	4b22      	ldr	r3, [pc, #136]	; (8009220 <HAL_RCC_ClockConfig+0x1b8>)
 8009198:	683a      	ldr	r2, [r7, #0]
 800919a:	b2d2      	uxtb	r2, r2
 800919c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800919e:	4b20      	ldr	r3, [pc, #128]	; (8009220 <HAL_RCC_ClockConfig+0x1b8>)
 80091a0:	681b      	ldr	r3, [r3, #0]
 80091a2:	f003 030f 	and.w	r3, r3, #15
 80091a6:	683a      	ldr	r2, [r7, #0]
 80091a8:	429a      	cmp	r2, r3
 80091aa:	d001      	beq.n	80091b0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80091ac:	2301      	movs	r3, #1
 80091ae:	e032      	b.n	8009216 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	681b      	ldr	r3, [r3, #0]
 80091b4:	f003 0304 	and.w	r3, r3, #4
 80091b8:	2b00      	cmp	r3, #0
 80091ba:	d008      	beq.n	80091ce <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80091bc:	4b19      	ldr	r3, [pc, #100]	; (8009224 <HAL_RCC_ClockConfig+0x1bc>)
 80091be:	689b      	ldr	r3, [r3, #8]
 80091c0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	68db      	ldr	r3, [r3, #12]
 80091c8:	4916      	ldr	r1, [pc, #88]	; (8009224 <HAL_RCC_ClockConfig+0x1bc>)
 80091ca:	4313      	orrs	r3, r2
 80091cc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	681b      	ldr	r3, [r3, #0]
 80091d2:	f003 0308 	and.w	r3, r3, #8
 80091d6:	2b00      	cmp	r3, #0
 80091d8:	d009      	beq.n	80091ee <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80091da:	4b12      	ldr	r3, [pc, #72]	; (8009224 <HAL_RCC_ClockConfig+0x1bc>)
 80091dc:	689b      	ldr	r3, [r3, #8]
 80091de:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	691b      	ldr	r3, [r3, #16]
 80091e6:	00db      	lsls	r3, r3, #3
 80091e8:	490e      	ldr	r1, [pc, #56]	; (8009224 <HAL_RCC_ClockConfig+0x1bc>)
 80091ea:	4313      	orrs	r3, r2
 80091ec:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80091ee:	f000 f855 	bl	800929c <HAL_RCC_GetSysClockFreq>
 80091f2:	4602      	mov	r2, r0
 80091f4:	4b0b      	ldr	r3, [pc, #44]	; (8009224 <HAL_RCC_ClockConfig+0x1bc>)
 80091f6:	689b      	ldr	r3, [r3, #8]
 80091f8:	091b      	lsrs	r3, r3, #4
 80091fa:	f003 030f 	and.w	r3, r3, #15
 80091fe:	490a      	ldr	r1, [pc, #40]	; (8009228 <HAL_RCC_ClockConfig+0x1c0>)
 8009200:	5ccb      	ldrb	r3, [r1, r3]
 8009202:	fa22 f303 	lsr.w	r3, r2, r3
 8009206:	4a09      	ldr	r2, [pc, #36]	; (800922c <HAL_RCC_ClockConfig+0x1c4>)
 8009208:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800920a:	4b09      	ldr	r3, [pc, #36]	; (8009230 <HAL_RCC_ClockConfig+0x1c8>)
 800920c:	681b      	ldr	r3, [r3, #0]
 800920e:	4618      	mov	r0, r3
 8009210:	f7ff fbb8 	bl	8008984 <HAL_InitTick>

  return HAL_OK;
 8009214:	2300      	movs	r3, #0
}
 8009216:	4618      	mov	r0, r3
 8009218:	3710      	adds	r7, #16
 800921a:	46bd      	mov	sp, r7
 800921c:	bd80      	pop	{r7, pc}
 800921e:	bf00      	nop
 8009220:	40023c00 	.word	0x40023c00
 8009224:	40023800 	.word	0x40023800
 8009228:	0800a444 	.word	0x0800a444
 800922c:	20000000 	.word	0x20000000
 8009230:	20000004 	.word	0x20000004

08009234 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8009234:	b480      	push	{r7}
 8009236:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8009238:	4b03      	ldr	r3, [pc, #12]	; (8009248 <HAL_RCC_GetHCLKFreq+0x14>)
 800923a:	681b      	ldr	r3, [r3, #0]
}
 800923c:	4618      	mov	r0, r3
 800923e:	46bd      	mov	sp, r7
 8009240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009244:	4770      	bx	lr
 8009246:	bf00      	nop
 8009248:	20000000 	.word	0x20000000

0800924c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800924c:	b580      	push	{r7, lr}
 800924e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8009250:	f7ff fff0 	bl	8009234 <HAL_RCC_GetHCLKFreq>
 8009254:	4602      	mov	r2, r0
 8009256:	4b05      	ldr	r3, [pc, #20]	; (800926c <HAL_RCC_GetPCLK1Freq+0x20>)
 8009258:	689b      	ldr	r3, [r3, #8]
 800925a:	0a9b      	lsrs	r3, r3, #10
 800925c:	f003 0307 	and.w	r3, r3, #7
 8009260:	4903      	ldr	r1, [pc, #12]	; (8009270 <HAL_RCC_GetPCLK1Freq+0x24>)
 8009262:	5ccb      	ldrb	r3, [r1, r3]
 8009264:	fa22 f303 	lsr.w	r3, r2, r3
}
 8009268:	4618      	mov	r0, r3
 800926a:	bd80      	pop	{r7, pc}
 800926c:	40023800 	.word	0x40023800
 8009270:	0800a454 	.word	0x0800a454

08009274 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8009274:	b580      	push	{r7, lr}
 8009276:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8009278:	f7ff ffdc 	bl	8009234 <HAL_RCC_GetHCLKFreq>
 800927c:	4602      	mov	r2, r0
 800927e:	4b05      	ldr	r3, [pc, #20]	; (8009294 <HAL_RCC_GetPCLK2Freq+0x20>)
 8009280:	689b      	ldr	r3, [r3, #8]
 8009282:	0b5b      	lsrs	r3, r3, #13
 8009284:	f003 0307 	and.w	r3, r3, #7
 8009288:	4903      	ldr	r1, [pc, #12]	; (8009298 <HAL_RCC_GetPCLK2Freq+0x24>)
 800928a:	5ccb      	ldrb	r3, [r1, r3]
 800928c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8009290:	4618      	mov	r0, r3
 8009292:	bd80      	pop	{r7, pc}
 8009294:	40023800 	.word	0x40023800
 8009298:	0800a454 	.word	0x0800a454

0800929c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800929c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80092a0:	b0ae      	sub	sp, #184	; 0xb8
 80092a2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80092a4:	2300      	movs	r3, #0
 80092a6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 80092aa:	2300      	movs	r3, #0
 80092ac:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 80092b0:	2300      	movs	r3, #0
 80092b2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 80092b6:	2300      	movs	r3, #0
 80092b8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 80092bc:	2300      	movs	r3, #0
 80092be:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80092c2:	4bcb      	ldr	r3, [pc, #812]	; (80095f0 <HAL_RCC_GetSysClockFreq+0x354>)
 80092c4:	689b      	ldr	r3, [r3, #8]
 80092c6:	f003 030c 	and.w	r3, r3, #12
 80092ca:	2b0c      	cmp	r3, #12
 80092cc:	f200 8206 	bhi.w	80096dc <HAL_RCC_GetSysClockFreq+0x440>
 80092d0:	a201      	add	r2, pc, #4	; (adr r2, 80092d8 <HAL_RCC_GetSysClockFreq+0x3c>)
 80092d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80092d6:	bf00      	nop
 80092d8:	0800930d 	.word	0x0800930d
 80092dc:	080096dd 	.word	0x080096dd
 80092e0:	080096dd 	.word	0x080096dd
 80092e4:	080096dd 	.word	0x080096dd
 80092e8:	08009315 	.word	0x08009315
 80092ec:	080096dd 	.word	0x080096dd
 80092f0:	080096dd 	.word	0x080096dd
 80092f4:	080096dd 	.word	0x080096dd
 80092f8:	0800931d 	.word	0x0800931d
 80092fc:	080096dd 	.word	0x080096dd
 8009300:	080096dd 	.word	0x080096dd
 8009304:	080096dd 	.word	0x080096dd
 8009308:	0800950d 	.word	0x0800950d
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800930c:	4bb9      	ldr	r3, [pc, #740]	; (80095f4 <HAL_RCC_GetSysClockFreq+0x358>)
 800930e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 8009312:	e1e7      	b.n	80096e4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8009314:	4bb8      	ldr	r3, [pc, #736]	; (80095f8 <HAL_RCC_GetSysClockFreq+0x35c>)
 8009316:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800931a:	e1e3      	b.n	80096e4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800931c:	4bb4      	ldr	r3, [pc, #720]	; (80095f0 <HAL_RCC_GetSysClockFreq+0x354>)
 800931e:	685b      	ldr	r3, [r3, #4]
 8009320:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009324:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8009328:	4bb1      	ldr	r3, [pc, #708]	; (80095f0 <HAL_RCC_GetSysClockFreq+0x354>)
 800932a:	685b      	ldr	r3, [r3, #4]
 800932c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009330:	2b00      	cmp	r3, #0
 8009332:	d071      	beq.n	8009418 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8009334:	4bae      	ldr	r3, [pc, #696]	; (80095f0 <HAL_RCC_GetSysClockFreq+0x354>)
 8009336:	685b      	ldr	r3, [r3, #4]
 8009338:	099b      	lsrs	r3, r3, #6
 800933a:	2200      	movs	r2, #0
 800933c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8009340:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8009344:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009348:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800934c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8009350:	2300      	movs	r3, #0
 8009352:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8009356:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800935a:	4622      	mov	r2, r4
 800935c:	462b      	mov	r3, r5
 800935e:	f04f 0000 	mov.w	r0, #0
 8009362:	f04f 0100 	mov.w	r1, #0
 8009366:	0159      	lsls	r1, r3, #5
 8009368:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800936c:	0150      	lsls	r0, r2, #5
 800936e:	4602      	mov	r2, r0
 8009370:	460b      	mov	r3, r1
 8009372:	4621      	mov	r1, r4
 8009374:	1a51      	subs	r1, r2, r1
 8009376:	6439      	str	r1, [r7, #64]	; 0x40
 8009378:	4629      	mov	r1, r5
 800937a:	eb63 0301 	sbc.w	r3, r3, r1
 800937e:	647b      	str	r3, [r7, #68]	; 0x44
 8009380:	f04f 0200 	mov.w	r2, #0
 8009384:	f04f 0300 	mov.w	r3, #0
 8009388:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 800938c:	4649      	mov	r1, r9
 800938e:	018b      	lsls	r3, r1, #6
 8009390:	4641      	mov	r1, r8
 8009392:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8009396:	4641      	mov	r1, r8
 8009398:	018a      	lsls	r2, r1, #6
 800939a:	4641      	mov	r1, r8
 800939c:	1a51      	subs	r1, r2, r1
 800939e:	63b9      	str	r1, [r7, #56]	; 0x38
 80093a0:	4649      	mov	r1, r9
 80093a2:	eb63 0301 	sbc.w	r3, r3, r1
 80093a6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80093a8:	f04f 0200 	mov.w	r2, #0
 80093ac:	f04f 0300 	mov.w	r3, #0
 80093b0:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 80093b4:	4649      	mov	r1, r9
 80093b6:	00cb      	lsls	r3, r1, #3
 80093b8:	4641      	mov	r1, r8
 80093ba:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80093be:	4641      	mov	r1, r8
 80093c0:	00ca      	lsls	r2, r1, #3
 80093c2:	4610      	mov	r0, r2
 80093c4:	4619      	mov	r1, r3
 80093c6:	4603      	mov	r3, r0
 80093c8:	4622      	mov	r2, r4
 80093ca:	189b      	adds	r3, r3, r2
 80093cc:	633b      	str	r3, [r7, #48]	; 0x30
 80093ce:	462b      	mov	r3, r5
 80093d0:	460a      	mov	r2, r1
 80093d2:	eb42 0303 	adc.w	r3, r2, r3
 80093d6:	637b      	str	r3, [r7, #52]	; 0x34
 80093d8:	f04f 0200 	mov.w	r2, #0
 80093dc:	f04f 0300 	mov.w	r3, #0
 80093e0:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80093e4:	4629      	mov	r1, r5
 80093e6:	024b      	lsls	r3, r1, #9
 80093e8:	4621      	mov	r1, r4
 80093ea:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80093ee:	4621      	mov	r1, r4
 80093f0:	024a      	lsls	r2, r1, #9
 80093f2:	4610      	mov	r0, r2
 80093f4:	4619      	mov	r1, r3
 80093f6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80093fa:	2200      	movs	r2, #0
 80093fc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8009400:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8009404:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8009408:	f7fe fefc 	bl	8008204 <__aeabi_uldivmod>
 800940c:	4602      	mov	r2, r0
 800940e:	460b      	mov	r3, r1
 8009410:	4613      	mov	r3, r2
 8009412:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8009416:	e067      	b.n	80094e8 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8009418:	4b75      	ldr	r3, [pc, #468]	; (80095f0 <HAL_RCC_GetSysClockFreq+0x354>)
 800941a:	685b      	ldr	r3, [r3, #4]
 800941c:	099b      	lsrs	r3, r3, #6
 800941e:	2200      	movs	r2, #0
 8009420:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8009424:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8009428:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800942c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009430:	67bb      	str	r3, [r7, #120]	; 0x78
 8009432:	2300      	movs	r3, #0
 8009434:	67fb      	str	r3, [r7, #124]	; 0x7c
 8009436:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 800943a:	4622      	mov	r2, r4
 800943c:	462b      	mov	r3, r5
 800943e:	f04f 0000 	mov.w	r0, #0
 8009442:	f04f 0100 	mov.w	r1, #0
 8009446:	0159      	lsls	r1, r3, #5
 8009448:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800944c:	0150      	lsls	r0, r2, #5
 800944e:	4602      	mov	r2, r0
 8009450:	460b      	mov	r3, r1
 8009452:	4621      	mov	r1, r4
 8009454:	1a51      	subs	r1, r2, r1
 8009456:	62b9      	str	r1, [r7, #40]	; 0x28
 8009458:	4629      	mov	r1, r5
 800945a:	eb63 0301 	sbc.w	r3, r3, r1
 800945e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009460:	f04f 0200 	mov.w	r2, #0
 8009464:	f04f 0300 	mov.w	r3, #0
 8009468:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 800946c:	4649      	mov	r1, r9
 800946e:	018b      	lsls	r3, r1, #6
 8009470:	4641      	mov	r1, r8
 8009472:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8009476:	4641      	mov	r1, r8
 8009478:	018a      	lsls	r2, r1, #6
 800947a:	4641      	mov	r1, r8
 800947c:	ebb2 0a01 	subs.w	sl, r2, r1
 8009480:	4649      	mov	r1, r9
 8009482:	eb63 0b01 	sbc.w	fp, r3, r1
 8009486:	f04f 0200 	mov.w	r2, #0
 800948a:	f04f 0300 	mov.w	r3, #0
 800948e:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8009492:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8009496:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800949a:	4692      	mov	sl, r2
 800949c:	469b      	mov	fp, r3
 800949e:	4623      	mov	r3, r4
 80094a0:	eb1a 0303 	adds.w	r3, sl, r3
 80094a4:	623b      	str	r3, [r7, #32]
 80094a6:	462b      	mov	r3, r5
 80094a8:	eb4b 0303 	adc.w	r3, fp, r3
 80094ac:	627b      	str	r3, [r7, #36]	; 0x24
 80094ae:	f04f 0200 	mov.w	r2, #0
 80094b2:	f04f 0300 	mov.w	r3, #0
 80094b6:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 80094ba:	4629      	mov	r1, r5
 80094bc:	028b      	lsls	r3, r1, #10
 80094be:	4621      	mov	r1, r4
 80094c0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80094c4:	4621      	mov	r1, r4
 80094c6:	028a      	lsls	r2, r1, #10
 80094c8:	4610      	mov	r0, r2
 80094ca:	4619      	mov	r1, r3
 80094cc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80094d0:	2200      	movs	r2, #0
 80094d2:	673b      	str	r3, [r7, #112]	; 0x70
 80094d4:	677a      	str	r2, [r7, #116]	; 0x74
 80094d6:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 80094da:	f7fe fe93 	bl	8008204 <__aeabi_uldivmod>
 80094de:	4602      	mov	r2, r0
 80094e0:	460b      	mov	r3, r1
 80094e2:	4613      	mov	r3, r2
 80094e4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80094e8:	4b41      	ldr	r3, [pc, #260]	; (80095f0 <HAL_RCC_GetSysClockFreq+0x354>)
 80094ea:	685b      	ldr	r3, [r3, #4]
 80094ec:	0c1b      	lsrs	r3, r3, #16
 80094ee:	f003 0303 	and.w	r3, r3, #3
 80094f2:	3301      	adds	r3, #1
 80094f4:	005b      	lsls	r3, r3, #1
 80094f6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 80094fa:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80094fe:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8009502:	fbb2 f3f3 	udiv	r3, r2, r3
 8009506:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800950a:	e0eb      	b.n	80096e4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800950c:	4b38      	ldr	r3, [pc, #224]	; (80095f0 <HAL_RCC_GetSysClockFreq+0x354>)
 800950e:	685b      	ldr	r3, [r3, #4]
 8009510:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009514:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8009518:	4b35      	ldr	r3, [pc, #212]	; (80095f0 <HAL_RCC_GetSysClockFreq+0x354>)
 800951a:	685b      	ldr	r3, [r3, #4]
 800951c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009520:	2b00      	cmp	r3, #0
 8009522:	d06b      	beq.n	80095fc <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8009524:	4b32      	ldr	r3, [pc, #200]	; (80095f0 <HAL_RCC_GetSysClockFreq+0x354>)
 8009526:	685b      	ldr	r3, [r3, #4]
 8009528:	099b      	lsrs	r3, r3, #6
 800952a:	2200      	movs	r2, #0
 800952c:	66bb      	str	r3, [r7, #104]	; 0x68
 800952e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8009530:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009532:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009536:	663b      	str	r3, [r7, #96]	; 0x60
 8009538:	2300      	movs	r3, #0
 800953a:	667b      	str	r3, [r7, #100]	; 0x64
 800953c:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8009540:	4622      	mov	r2, r4
 8009542:	462b      	mov	r3, r5
 8009544:	f04f 0000 	mov.w	r0, #0
 8009548:	f04f 0100 	mov.w	r1, #0
 800954c:	0159      	lsls	r1, r3, #5
 800954e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8009552:	0150      	lsls	r0, r2, #5
 8009554:	4602      	mov	r2, r0
 8009556:	460b      	mov	r3, r1
 8009558:	4621      	mov	r1, r4
 800955a:	1a51      	subs	r1, r2, r1
 800955c:	61b9      	str	r1, [r7, #24]
 800955e:	4629      	mov	r1, r5
 8009560:	eb63 0301 	sbc.w	r3, r3, r1
 8009564:	61fb      	str	r3, [r7, #28]
 8009566:	f04f 0200 	mov.w	r2, #0
 800956a:	f04f 0300 	mov.w	r3, #0
 800956e:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8009572:	4659      	mov	r1, fp
 8009574:	018b      	lsls	r3, r1, #6
 8009576:	4651      	mov	r1, sl
 8009578:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800957c:	4651      	mov	r1, sl
 800957e:	018a      	lsls	r2, r1, #6
 8009580:	4651      	mov	r1, sl
 8009582:	ebb2 0801 	subs.w	r8, r2, r1
 8009586:	4659      	mov	r1, fp
 8009588:	eb63 0901 	sbc.w	r9, r3, r1
 800958c:	f04f 0200 	mov.w	r2, #0
 8009590:	f04f 0300 	mov.w	r3, #0
 8009594:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8009598:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800959c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80095a0:	4690      	mov	r8, r2
 80095a2:	4699      	mov	r9, r3
 80095a4:	4623      	mov	r3, r4
 80095a6:	eb18 0303 	adds.w	r3, r8, r3
 80095aa:	613b      	str	r3, [r7, #16]
 80095ac:	462b      	mov	r3, r5
 80095ae:	eb49 0303 	adc.w	r3, r9, r3
 80095b2:	617b      	str	r3, [r7, #20]
 80095b4:	f04f 0200 	mov.w	r2, #0
 80095b8:	f04f 0300 	mov.w	r3, #0
 80095bc:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 80095c0:	4629      	mov	r1, r5
 80095c2:	024b      	lsls	r3, r1, #9
 80095c4:	4621      	mov	r1, r4
 80095c6:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80095ca:	4621      	mov	r1, r4
 80095cc:	024a      	lsls	r2, r1, #9
 80095ce:	4610      	mov	r0, r2
 80095d0:	4619      	mov	r1, r3
 80095d2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80095d6:	2200      	movs	r2, #0
 80095d8:	65bb      	str	r3, [r7, #88]	; 0x58
 80095da:	65fa      	str	r2, [r7, #92]	; 0x5c
 80095dc:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80095e0:	f7fe fe10 	bl	8008204 <__aeabi_uldivmod>
 80095e4:	4602      	mov	r2, r0
 80095e6:	460b      	mov	r3, r1
 80095e8:	4613      	mov	r3, r2
 80095ea:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80095ee:	e065      	b.n	80096bc <HAL_RCC_GetSysClockFreq+0x420>
 80095f0:	40023800 	.word	0x40023800
 80095f4:	00f42400 	.word	0x00f42400
 80095f8:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80095fc:	4b3d      	ldr	r3, [pc, #244]	; (80096f4 <HAL_RCC_GetSysClockFreq+0x458>)
 80095fe:	685b      	ldr	r3, [r3, #4]
 8009600:	099b      	lsrs	r3, r3, #6
 8009602:	2200      	movs	r2, #0
 8009604:	4618      	mov	r0, r3
 8009606:	4611      	mov	r1, r2
 8009608:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800960c:	653b      	str	r3, [r7, #80]	; 0x50
 800960e:	2300      	movs	r3, #0
 8009610:	657b      	str	r3, [r7, #84]	; 0x54
 8009612:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8009616:	4642      	mov	r2, r8
 8009618:	464b      	mov	r3, r9
 800961a:	f04f 0000 	mov.w	r0, #0
 800961e:	f04f 0100 	mov.w	r1, #0
 8009622:	0159      	lsls	r1, r3, #5
 8009624:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8009628:	0150      	lsls	r0, r2, #5
 800962a:	4602      	mov	r2, r0
 800962c:	460b      	mov	r3, r1
 800962e:	4641      	mov	r1, r8
 8009630:	1a51      	subs	r1, r2, r1
 8009632:	60b9      	str	r1, [r7, #8]
 8009634:	4649      	mov	r1, r9
 8009636:	eb63 0301 	sbc.w	r3, r3, r1
 800963a:	60fb      	str	r3, [r7, #12]
 800963c:	f04f 0200 	mov.w	r2, #0
 8009640:	f04f 0300 	mov.w	r3, #0
 8009644:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8009648:	4659      	mov	r1, fp
 800964a:	018b      	lsls	r3, r1, #6
 800964c:	4651      	mov	r1, sl
 800964e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8009652:	4651      	mov	r1, sl
 8009654:	018a      	lsls	r2, r1, #6
 8009656:	4651      	mov	r1, sl
 8009658:	1a54      	subs	r4, r2, r1
 800965a:	4659      	mov	r1, fp
 800965c:	eb63 0501 	sbc.w	r5, r3, r1
 8009660:	f04f 0200 	mov.w	r2, #0
 8009664:	f04f 0300 	mov.w	r3, #0
 8009668:	00eb      	lsls	r3, r5, #3
 800966a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800966e:	00e2      	lsls	r2, r4, #3
 8009670:	4614      	mov	r4, r2
 8009672:	461d      	mov	r5, r3
 8009674:	4643      	mov	r3, r8
 8009676:	18e3      	adds	r3, r4, r3
 8009678:	603b      	str	r3, [r7, #0]
 800967a:	464b      	mov	r3, r9
 800967c:	eb45 0303 	adc.w	r3, r5, r3
 8009680:	607b      	str	r3, [r7, #4]
 8009682:	f04f 0200 	mov.w	r2, #0
 8009686:	f04f 0300 	mov.w	r3, #0
 800968a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800968e:	4629      	mov	r1, r5
 8009690:	028b      	lsls	r3, r1, #10
 8009692:	4621      	mov	r1, r4
 8009694:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8009698:	4621      	mov	r1, r4
 800969a:	028a      	lsls	r2, r1, #10
 800969c:	4610      	mov	r0, r2
 800969e:	4619      	mov	r1, r3
 80096a0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80096a4:	2200      	movs	r2, #0
 80096a6:	64bb      	str	r3, [r7, #72]	; 0x48
 80096a8:	64fa      	str	r2, [r7, #76]	; 0x4c
 80096aa:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80096ae:	f7fe fda9 	bl	8008204 <__aeabi_uldivmod>
 80096b2:	4602      	mov	r2, r0
 80096b4:	460b      	mov	r3, r1
 80096b6:	4613      	mov	r3, r2
 80096b8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80096bc:	4b0d      	ldr	r3, [pc, #52]	; (80096f4 <HAL_RCC_GetSysClockFreq+0x458>)
 80096be:	685b      	ldr	r3, [r3, #4]
 80096c0:	0f1b      	lsrs	r3, r3, #28
 80096c2:	f003 0307 	and.w	r3, r3, #7
 80096c6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 80096ca:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80096ce:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80096d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80096d6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80096da:	e003      	b.n	80096e4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80096dc:	4b06      	ldr	r3, [pc, #24]	; (80096f8 <HAL_RCC_GetSysClockFreq+0x45c>)
 80096de:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80096e2:	bf00      	nop
    }
  }
  return sysclockfreq;
 80096e4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 80096e8:	4618      	mov	r0, r3
 80096ea:	37b8      	adds	r7, #184	; 0xb8
 80096ec:	46bd      	mov	sp, r7
 80096ee:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80096f2:	bf00      	nop
 80096f4:	40023800 	.word	0x40023800
 80096f8:	00f42400 	.word	0x00f42400

080096fc <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80096fc:	b580      	push	{r7, lr}
 80096fe:	b086      	sub	sp, #24
 8009700:	af00      	add	r7, sp, #0
 8009702:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	2b00      	cmp	r3, #0
 8009708:	d101      	bne.n	800970e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800970a:	2301      	movs	r3, #1
 800970c:	e28d      	b.n	8009c2a <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	681b      	ldr	r3, [r3, #0]
 8009712:	f003 0301 	and.w	r3, r3, #1
 8009716:	2b00      	cmp	r3, #0
 8009718:	f000 8083 	beq.w	8009822 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800971c:	4b94      	ldr	r3, [pc, #592]	; (8009970 <HAL_RCC_OscConfig+0x274>)
 800971e:	689b      	ldr	r3, [r3, #8]
 8009720:	f003 030c 	and.w	r3, r3, #12
 8009724:	2b04      	cmp	r3, #4
 8009726:	d019      	beq.n	800975c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8009728:	4b91      	ldr	r3, [pc, #580]	; (8009970 <HAL_RCC_OscConfig+0x274>)
 800972a:	689b      	ldr	r3, [r3, #8]
 800972c:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8009730:	2b08      	cmp	r3, #8
 8009732:	d106      	bne.n	8009742 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8009734:	4b8e      	ldr	r3, [pc, #568]	; (8009970 <HAL_RCC_OscConfig+0x274>)
 8009736:	685b      	ldr	r3, [r3, #4]
 8009738:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800973c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009740:	d00c      	beq.n	800975c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8009742:	4b8b      	ldr	r3, [pc, #556]	; (8009970 <HAL_RCC_OscConfig+0x274>)
 8009744:	689b      	ldr	r3, [r3, #8]
 8009746:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800974a:	2b0c      	cmp	r3, #12
 800974c:	d112      	bne.n	8009774 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800974e:	4b88      	ldr	r3, [pc, #544]	; (8009970 <HAL_RCC_OscConfig+0x274>)
 8009750:	685b      	ldr	r3, [r3, #4]
 8009752:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009756:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800975a:	d10b      	bne.n	8009774 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800975c:	4b84      	ldr	r3, [pc, #528]	; (8009970 <HAL_RCC_OscConfig+0x274>)
 800975e:	681b      	ldr	r3, [r3, #0]
 8009760:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009764:	2b00      	cmp	r3, #0
 8009766:	d05b      	beq.n	8009820 <HAL_RCC_OscConfig+0x124>
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	685b      	ldr	r3, [r3, #4]
 800976c:	2b00      	cmp	r3, #0
 800976e:	d157      	bne.n	8009820 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8009770:	2301      	movs	r3, #1
 8009772:	e25a      	b.n	8009c2a <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	685b      	ldr	r3, [r3, #4]
 8009778:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800977c:	d106      	bne.n	800978c <HAL_RCC_OscConfig+0x90>
 800977e:	4b7c      	ldr	r3, [pc, #496]	; (8009970 <HAL_RCC_OscConfig+0x274>)
 8009780:	681b      	ldr	r3, [r3, #0]
 8009782:	4a7b      	ldr	r2, [pc, #492]	; (8009970 <HAL_RCC_OscConfig+0x274>)
 8009784:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009788:	6013      	str	r3, [r2, #0]
 800978a:	e01d      	b.n	80097c8 <HAL_RCC_OscConfig+0xcc>
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	685b      	ldr	r3, [r3, #4]
 8009790:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8009794:	d10c      	bne.n	80097b0 <HAL_RCC_OscConfig+0xb4>
 8009796:	4b76      	ldr	r3, [pc, #472]	; (8009970 <HAL_RCC_OscConfig+0x274>)
 8009798:	681b      	ldr	r3, [r3, #0]
 800979a:	4a75      	ldr	r2, [pc, #468]	; (8009970 <HAL_RCC_OscConfig+0x274>)
 800979c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80097a0:	6013      	str	r3, [r2, #0]
 80097a2:	4b73      	ldr	r3, [pc, #460]	; (8009970 <HAL_RCC_OscConfig+0x274>)
 80097a4:	681b      	ldr	r3, [r3, #0]
 80097a6:	4a72      	ldr	r2, [pc, #456]	; (8009970 <HAL_RCC_OscConfig+0x274>)
 80097a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80097ac:	6013      	str	r3, [r2, #0]
 80097ae:	e00b      	b.n	80097c8 <HAL_RCC_OscConfig+0xcc>
 80097b0:	4b6f      	ldr	r3, [pc, #444]	; (8009970 <HAL_RCC_OscConfig+0x274>)
 80097b2:	681b      	ldr	r3, [r3, #0]
 80097b4:	4a6e      	ldr	r2, [pc, #440]	; (8009970 <HAL_RCC_OscConfig+0x274>)
 80097b6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80097ba:	6013      	str	r3, [r2, #0]
 80097bc:	4b6c      	ldr	r3, [pc, #432]	; (8009970 <HAL_RCC_OscConfig+0x274>)
 80097be:	681b      	ldr	r3, [r3, #0]
 80097c0:	4a6b      	ldr	r2, [pc, #428]	; (8009970 <HAL_RCC_OscConfig+0x274>)
 80097c2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80097c6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	685b      	ldr	r3, [r3, #4]
 80097cc:	2b00      	cmp	r3, #0
 80097ce:	d013      	beq.n	80097f8 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80097d0:	f7ff f91c 	bl	8008a0c <HAL_GetTick>
 80097d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80097d6:	e008      	b.n	80097ea <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80097d8:	f7ff f918 	bl	8008a0c <HAL_GetTick>
 80097dc:	4602      	mov	r2, r0
 80097de:	693b      	ldr	r3, [r7, #16]
 80097e0:	1ad3      	subs	r3, r2, r3
 80097e2:	2b64      	cmp	r3, #100	; 0x64
 80097e4:	d901      	bls.n	80097ea <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80097e6:	2303      	movs	r3, #3
 80097e8:	e21f      	b.n	8009c2a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80097ea:	4b61      	ldr	r3, [pc, #388]	; (8009970 <HAL_RCC_OscConfig+0x274>)
 80097ec:	681b      	ldr	r3, [r3, #0]
 80097ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80097f2:	2b00      	cmp	r3, #0
 80097f4:	d0f0      	beq.n	80097d8 <HAL_RCC_OscConfig+0xdc>
 80097f6:	e014      	b.n	8009822 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80097f8:	f7ff f908 	bl	8008a0c <HAL_GetTick>
 80097fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80097fe:	e008      	b.n	8009812 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8009800:	f7ff f904 	bl	8008a0c <HAL_GetTick>
 8009804:	4602      	mov	r2, r0
 8009806:	693b      	ldr	r3, [r7, #16]
 8009808:	1ad3      	subs	r3, r2, r3
 800980a:	2b64      	cmp	r3, #100	; 0x64
 800980c:	d901      	bls.n	8009812 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800980e:	2303      	movs	r3, #3
 8009810:	e20b      	b.n	8009c2a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8009812:	4b57      	ldr	r3, [pc, #348]	; (8009970 <HAL_RCC_OscConfig+0x274>)
 8009814:	681b      	ldr	r3, [r3, #0]
 8009816:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800981a:	2b00      	cmp	r3, #0
 800981c:	d1f0      	bne.n	8009800 <HAL_RCC_OscConfig+0x104>
 800981e:	e000      	b.n	8009822 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009820:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	681b      	ldr	r3, [r3, #0]
 8009826:	f003 0302 	and.w	r3, r3, #2
 800982a:	2b00      	cmp	r3, #0
 800982c:	d06f      	beq.n	800990e <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800982e:	4b50      	ldr	r3, [pc, #320]	; (8009970 <HAL_RCC_OscConfig+0x274>)
 8009830:	689b      	ldr	r3, [r3, #8]
 8009832:	f003 030c 	and.w	r3, r3, #12
 8009836:	2b00      	cmp	r3, #0
 8009838:	d017      	beq.n	800986a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800983a:	4b4d      	ldr	r3, [pc, #308]	; (8009970 <HAL_RCC_OscConfig+0x274>)
 800983c:	689b      	ldr	r3, [r3, #8]
 800983e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8009842:	2b08      	cmp	r3, #8
 8009844:	d105      	bne.n	8009852 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8009846:	4b4a      	ldr	r3, [pc, #296]	; (8009970 <HAL_RCC_OscConfig+0x274>)
 8009848:	685b      	ldr	r3, [r3, #4]
 800984a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800984e:	2b00      	cmp	r3, #0
 8009850:	d00b      	beq.n	800986a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8009852:	4b47      	ldr	r3, [pc, #284]	; (8009970 <HAL_RCC_OscConfig+0x274>)
 8009854:	689b      	ldr	r3, [r3, #8]
 8009856:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800985a:	2b0c      	cmp	r3, #12
 800985c:	d11c      	bne.n	8009898 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800985e:	4b44      	ldr	r3, [pc, #272]	; (8009970 <HAL_RCC_OscConfig+0x274>)
 8009860:	685b      	ldr	r3, [r3, #4]
 8009862:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009866:	2b00      	cmp	r3, #0
 8009868:	d116      	bne.n	8009898 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800986a:	4b41      	ldr	r3, [pc, #260]	; (8009970 <HAL_RCC_OscConfig+0x274>)
 800986c:	681b      	ldr	r3, [r3, #0]
 800986e:	f003 0302 	and.w	r3, r3, #2
 8009872:	2b00      	cmp	r3, #0
 8009874:	d005      	beq.n	8009882 <HAL_RCC_OscConfig+0x186>
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	68db      	ldr	r3, [r3, #12]
 800987a:	2b01      	cmp	r3, #1
 800987c:	d001      	beq.n	8009882 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800987e:	2301      	movs	r3, #1
 8009880:	e1d3      	b.n	8009c2a <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009882:	4b3b      	ldr	r3, [pc, #236]	; (8009970 <HAL_RCC_OscConfig+0x274>)
 8009884:	681b      	ldr	r3, [r3, #0]
 8009886:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	691b      	ldr	r3, [r3, #16]
 800988e:	00db      	lsls	r3, r3, #3
 8009890:	4937      	ldr	r1, [pc, #220]	; (8009970 <HAL_RCC_OscConfig+0x274>)
 8009892:	4313      	orrs	r3, r2
 8009894:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8009896:	e03a      	b.n	800990e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	68db      	ldr	r3, [r3, #12]
 800989c:	2b00      	cmp	r3, #0
 800989e:	d020      	beq.n	80098e2 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80098a0:	4b34      	ldr	r3, [pc, #208]	; (8009974 <HAL_RCC_OscConfig+0x278>)
 80098a2:	2201      	movs	r2, #1
 80098a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80098a6:	f7ff f8b1 	bl	8008a0c <HAL_GetTick>
 80098aa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80098ac:	e008      	b.n	80098c0 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80098ae:	f7ff f8ad 	bl	8008a0c <HAL_GetTick>
 80098b2:	4602      	mov	r2, r0
 80098b4:	693b      	ldr	r3, [r7, #16]
 80098b6:	1ad3      	subs	r3, r2, r3
 80098b8:	2b02      	cmp	r3, #2
 80098ba:	d901      	bls.n	80098c0 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 80098bc:	2303      	movs	r3, #3
 80098be:	e1b4      	b.n	8009c2a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80098c0:	4b2b      	ldr	r3, [pc, #172]	; (8009970 <HAL_RCC_OscConfig+0x274>)
 80098c2:	681b      	ldr	r3, [r3, #0]
 80098c4:	f003 0302 	and.w	r3, r3, #2
 80098c8:	2b00      	cmp	r3, #0
 80098ca:	d0f0      	beq.n	80098ae <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80098cc:	4b28      	ldr	r3, [pc, #160]	; (8009970 <HAL_RCC_OscConfig+0x274>)
 80098ce:	681b      	ldr	r3, [r3, #0]
 80098d0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	691b      	ldr	r3, [r3, #16]
 80098d8:	00db      	lsls	r3, r3, #3
 80098da:	4925      	ldr	r1, [pc, #148]	; (8009970 <HAL_RCC_OscConfig+0x274>)
 80098dc:	4313      	orrs	r3, r2
 80098de:	600b      	str	r3, [r1, #0]
 80098e0:	e015      	b.n	800990e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80098e2:	4b24      	ldr	r3, [pc, #144]	; (8009974 <HAL_RCC_OscConfig+0x278>)
 80098e4:	2200      	movs	r2, #0
 80098e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80098e8:	f7ff f890 	bl	8008a0c <HAL_GetTick>
 80098ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80098ee:	e008      	b.n	8009902 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80098f0:	f7ff f88c 	bl	8008a0c <HAL_GetTick>
 80098f4:	4602      	mov	r2, r0
 80098f6:	693b      	ldr	r3, [r7, #16]
 80098f8:	1ad3      	subs	r3, r2, r3
 80098fa:	2b02      	cmp	r3, #2
 80098fc:	d901      	bls.n	8009902 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80098fe:	2303      	movs	r3, #3
 8009900:	e193      	b.n	8009c2a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8009902:	4b1b      	ldr	r3, [pc, #108]	; (8009970 <HAL_RCC_OscConfig+0x274>)
 8009904:	681b      	ldr	r3, [r3, #0]
 8009906:	f003 0302 	and.w	r3, r3, #2
 800990a:	2b00      	cmp	r3, #0
 800990c:	d1f0      	bne.n	80098f0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	681b      	ldr	r3, [r3, #0]
 8009912:	f003 0308 	and.w	r3, r3, #8
 8009916:	2b00      	cmp	r3, #0
 8009918:	d036      	beq.n	8009988 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	695b      	ldr	r3, [r3, #20]
 800991e:	2b00      	cmp	r3, #0
 8009920:	d016      	beq.n	8009950 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8009922:	4b15      	ldr	r3, [pc, #84]	; (8009978 <HAL_RCC_OscConfig+0x27c>)
 8009924:	2201      	movs	r2, #1
 8009926:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009928:	f7ff f870 	bl	8008a0c <HAL_GetTick>
 800992c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800992e:	e008      	b.n	8009942 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8009930:	f7ff f86c 	bl	8008a0c <HAL_GetTick>
 8009934:	4602      	mov	r2, r0
 8009936:	693b      	ldr	r3, [r7, #16]
 8009938:	1ad3      	subs	r3, r2, r3
 800993a:	2b02      	cmp	r3, #2
 800993c:	d901      	bls.n	8009942 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800993e:	2303      	movs	r3, #3
 8009940:	e173      	b.n	8009c2a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8009942:	4b0b      	ldr	r3, [pc, #44]	; (8009970 <HAL_RCC_OscConfig+0x274>)
 8009944:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009946:	f003 0302 	and.w	r3, r3, #2
 800994a:	2b00      	cmp	r3, #0
 800994c:	d0f0      	beq.n	8009930 <HAL_RCC_OscConfig+0x234>
 800994e:	e01b      	b.n	8009988 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8009950:	4b09      	ldr	r3, [pc, #36]	; (8009978 <HAL_RCC_OscConfig+0x27c>)
 8009952:	2200      	movs	r2, #0
 8009954:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009956:	f7ff f859 	bl	8008a0c <HAL_GetTick>
 800995a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800995c:	e00e      	b.n	800997c <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800995e:	f7ff f855 	bl	8008a0c <HAL_GetTick>
 8009962:	4602      	mov	r2, r0
 8009964:	693b      	ldr	r3, [r7, #16]
 8009966:	1ad3      	subs	r3, r2, r3
 8009968:	2b02      	cmp	r3, #2
 800996a:	d907      	bls.n	800997c <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 800996c:	2303      	movs	r3, #3
 800996e:	e15c      	b.n	8009c2a <HAL_RCC_OscConfig+0x52e>
 8009970:	40023800 	.word	0x40023800
 8009974:	42470000 	.word	0x42470000
 8009978:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800997c:	4b8a      	ldr	r3, [pc, #552]	; (8009ba8 <HAL_RCC_OscConfig+0x4ac>)
 800997e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009980:	f003 0302 	and.w	r3, r3, #2
 8009984:	2b00      	cmp	r3, #0
 8009986:	d1ea      	bne.n	800995e <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	681b      	ldr	r3, [r3, #0]
 800998c:	f003 0304 	and.w	r3, r3, #4
 8009990:	2b00      	cmp	r3, #0
 8009992:	f000 8097 	beq.w	8009ac4 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8009996:	2300      	movs	r3, #0
 8009998:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800999a:	4b83      	ldr	r3, [pc, #524]	; (8009ba8 <HAL_RCC_OscConfig+0x4ac>)
 800999c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800999e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80099a2:	2b00      	cmp	r3, #0
 80099a4:	d10f      	bne.n	80099c6 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80099a6:	2300      	movs	r3, #0
 80099a8:	60bb      	str	r3, [r7, #8]
 80099aa:	4b7f      	ldr	r3, [pc, #508]	; (8009ba8 <HAL_RCC_OscConfig+0x4ac>)
 80099ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80099ae:	4a7e      	ldr	r2, [pc, #504]	; (8009ba8 <HAL_RCC_OscConfig+0x4ac>)
 80099b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80099b4:	6413      	str	r3, [r2, #64]	; 0x40
 80099b6:	4b7c      	ldr	r3, [pc, #496]	; (8009ba8 <HAL_RCC_OscConfig+0x4ac>)
 80099b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80099ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80099be:	60bb      	str	r3, [r7, #8]
 80099c0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80099c2:	2301      	movs	r3, #1
 80099c4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80099c6:	4b79      	ldr	r3, [pc, #484]	; (8009bac <HAL_RCC_OscConfig+0x4b0>)
 80099c8:	681b      	ldr	r3, [r3, #0]
 80099ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80099ce:	2b00      	cmp	r3, #0
 80099d0:	d118      	bne.n	8009a04 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80099d2:	4b76      	ldr	r3, [pc, #472]	; (8009bac <HAL_RCC_OscConfig+0x4b0>)
 80099d4:	681b      	ldr	r3, [r3, #0]
 80099d6:	4a75      	ldr	r2, [pc, #468]	; (8009bac <HAL_RCC_OscConfig+0x4b0>)
 80099d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80099dc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80099de:	f7ff f815 	bl	8008a0c <HAL_GetTick>
 80099e2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80099e4:	e008      	b.n	80099f8 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80099e6:	f7ff f811 	bl	8008a0c <HAL_GetTick>
 80099ea:	4602      	mov	r2, r0
 80099ec:	693b      	ldr	r3, [r7, #16]
 80099ee:	1ad3      	subs	r3, r2, r3
 80099f0:	2b02      	cmp	r3, #2
 80099f2:	d901      	bls.n	80099f8 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80099f4:	2303      	movs	r3, #3
 80099f6:	e118      	b.n	8009c2a <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80099f8:	4b6c      	ldr	r3, [pc, #432]	; (8009bac <HAL_RCC_OscConfig+0x4b0>)
 80099fa:	681b      	ldr	r3, [r3, #0]
 80099fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009a00:	2b00      	cmp	r3, #0
 8009a02:	d0f0      	beq.n	80099e6 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	689b      	ldr	r3, [r3, #8]
 8009a08:	2b01      	cmp	r3, #1
 8009a0a:	d106      	bne.n	8009a1a <HAL_RCC_OscConfig+0x31e>
 8009a0c:	4b66      	ldr	r3, [pc, #408]	; (8009ba8 <HAL_RCC_OscConfig+0x4ac>)
 8009a0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009a10:	4a65      	ldr	r2, [pc, #404]	; (8009ba8 <HAL_RCC_OscConfig+0x4ac>)
 8009a12:	f043 0301 	orr.w	r3, r3, #1
 8009a16:	6713      	str	r3, [r2, #112]	; 0x70
 8009a18:	e01c      	b.n	8009a54 <HAL_RCC_OscConfig+0x358>
 8009a1a:	687b      	ldr	r3, [r7, #4]
 8009a1c:	689b      	ldr	r3, [r3, #8]
 8009a1e:	2b05      	cmp	r3, #5
 8009a20:	d10c      	bne.n	8009a3c <HAL_RCC_OscConfig+0x340>
 8009a22:	4b61      	ldr	r3, [pc, #388]	; (8009ba8 <HAL_RCC_OscConfig+0x4ac>)
 8009a24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009a26:	4a60      	ldr	r2, [pc, #384]	; (8009ba8 <HAL_RCC_OscConfig+0x4ac>)
 8009a28:	f043 0304 	orr.w	r3, r3, #4
 8009a2c:	6713      	str	r3, [r2, #112]	; 0x70
 8009a2e:	4b5e      	ldr	r3, [pc, #376]	; (8009ba8 <HAL_RCC_OscConfig+0x4ac>)
 8009a30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009a32:	4a5d      	ldr	r2, [pc, #372]	; (8009ba8 <HAL_RCC_OscConfig+0x4ac>)
 8009a34:	f043 0301 	orr.w	r3, r3, #1
 8009a38:	6713      	str	r3, [r2, #112]	; 0x70
 8009a3a:	e00b      	b.n	8009a54 <HAL_RCC_OscConfig+0x358>
 8009a3c:	4b5a      	ldr	r3, [pc, #360]	; (8009ba8 <HAL_RCC_OscConfig+0x4ac>)
 8009a3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009a40:	4a59      	ldr	r2, [pc, #356]	; (8009ba8 <HAL_RCC_OscConfig+0x4ac>)
 8009a42:	f023 0301 	bic.w	r3, r3, #1
 8009a46:	6713      	str	r3, [r2, #112]	; 0x70
 8009a48:	4b57      	ldr	r3, [pc, #348]	; (8009ba8 <HAL_RCC_OscConfig+0x4ac>)
 8009a4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009a4c:	4a56      	ldr	r2, [pc, #344]	; (8009ba8 <HAL_RCC_OscConfig+0x4ac>)
 8009a4e:	f023 0304 	bic.w	r3, r3, #4
 8009a52:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	689b      	ldr	r3, [r3, #8]
 8009a58:	2b00      	cmp	r3, #0
 8009a5a:	d015      	beq.n	8009a88 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009a5c:	f7fe ffd6 	bl	8008a0c <HAL_GetTick>
 8009a60:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009a62:	e00a      	b.n	8009a7a <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8009a64:	f7fe ffd2 	bl	8008a0c <HAL_GetTick>
 8009a68:	4602      	mov	r2, r0
 8009a6a:	693b      	ldr	r3, [r7, #16]
 8009a6c:	1ad3      	subs	r3, r2, r3
 8009a6e:	f241 3288 	movw	r2, #5000	; 0x1388
 8009a72:	4293      	cmp	r3, r2
 8009a74:	d901      	bls.n	8009a7a <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8009a76:	2303      	movs	r3, #3
 8009a78:	e0d7      	b.n	8009c2a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009a7a:	4b4b      	ldr	r3, [pc, #300]	; (8009ba8 <HAL_RCC_OscConfig+0x4ac>)
 8009a7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009a7e:	f003 0302 	and.w	r3, r3, #2
 8009a82:	2b00      	cmp	r3, #0
 8009a84:	d0ee      	beq.n	8009a64 <HAL_RCC_OscConfig+0x368>
 8009a86:	e014      	b.n	8009ab2 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009a88:	f7fe ffc0 	bl	8008a0c <HAL_GetTick>
 8009a8c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8009a8e:	e00a      	b.n	8009aa6 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8009a90:	f7fe ffbc 	bl	8008a0c <HAL_GetTick>
 8009a94:	4602      	mov	r2, r0
 8009a96:	693b      	ldr	r3, [r7, #16]
 8009a98:	1ad3      	subs	r3, r2, r3
 8009a9a:	f241 3288 	movw	r2, #5000	; 0x1388
 8009a9e:	4293      	cmp	r3, r2
 8009aa0:	d901      	bls.n	8009aa6 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8009aa2:	2303      	movs	r3, #3
 8009aa4:	e0c1      	b.n	8009c2a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8009aa6:	4b40      	ldr	r3, [pc, #256]	; (8009ba8 <HAL_RCC_OscConfig+0x4ac>)
 8009aa8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009aaa:	f003 0302 	and.w	r3, r3, #2
 8009aae:	2b00      	cmp	r3, #0
 8009ab0:	d1ee      	bne.n	8009a90 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8009ab2:	7dfb      	ldrb	r3, [r7, #23]
 8009ab4:	2b01      	cmp	r3, #1
 8009ab6:	d105      	bne.n	8009ac4 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8009ab8:	4b3b      	ldr	r3, [pc, #236]	; (8009ba8 <HAL_RCC_OscConfig+0x4ac>)
 8009aba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009abc:	4a3a      	ldr	r2, [pc, #232]	; (8009ba8 <HAL_RCC_OscConfig+0x4ac>)
 8009abe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009ac2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	699b      	ldr	r3, [r3, #24]
 8009ac8:	2b00      	cmp	r3, #0
 8009aca:	f000 80ad 	beq.w	8009c28 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8009ace:	4b36      	ldr	r3, [pc, #216]	; (8009ba8 <HAL_RCC_OscConfig+0x4ac>)
 8009ad0:	689b      	ldr	r3, [r3, #8]
 8009ad2:	f003 030c 	and.w	r3, r3, #12
 8009ad6:	2b08      	cmp	r3, #8
 8009ad8:	d060      	beq.n	8009b9c <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	699b      	ldr	r3, [r3, #24]
 8009ade:	2b02      	cmp	r3, #2
 8009ae0:	d145      	bne.n	8009b6e <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009ae2:	4b33      	ldr	r3, [pc, #204]	; (8009bb0 <HAL_RCC_OscConfig+0x4b4>)
 8009ae4:	2200      	movs	r2, #0
 8009ae6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009ae8:	f7fe ff90 	bl	8008a0c <HAL_GetTick>
 8009aec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009aee:	e008      	b.n	8009b02 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009af0:	f7fe ff8c 	bl	8008a0c <HAL_GetTick>
 8009af4:	4602      	mov	r2, r0
 8009af6:	693b      	ldr	r3, [r7, #16]
 8009af8:	1ad3      	subs	r3, r2, r3
 8009afa:	2b02      	cmp	r3, #2
 8009afc:	d901      	bls.n	8009b02 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8009afe:	2303      	movs	r3, #3
 8009b00:	e093      	b.n	8009c2a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009b02:	4b29      	ldr	r3, [pc, #164]	; (8009ba8 <HAL_RCC_OscConfig+0x4ac>)
 8009b04:	681b      	ldr	r3, [r3, #0]
 8009b06:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009b0a:	2b00      	cmp	r3, #0
 8009b0c:	d1f0      	bne.n	8009af0 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	69da      	ldr	r2, [r3, #28]
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	6a1b      	ldr	r3, [r3, #32]
 8009b16:	431a      	orrs	r2, r3
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b1c:	019b      	lsls	r3, r3, #6
 8009b1e:	431a      	orrs	r2, r3
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009b24:	085b      	lsrs	r3, r3, #1
 8009b26:	3b01      	subs	r3, #1
 8009b28:	041b      	lsls	r3, r3, #16
 8009b2a:	431a      	orrs	r2, r3
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b30:	061b      	lsls	r3, r3, #24
 8009b32:	431a      	orrs	r2, r3
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009b38:	071b      	lsls	r3, r3, #28
 8009b3a:	491b      	ldr	r1, [pc, #108]	; (8009ba8 <HAL_RCC_OscConfig+0x4ac>)
 8009b3c:	4313      	orrs	r3, r2
 8009b3e:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8009b40:	4b1b      	ldr	r3, [pc, #108]	; (8009bb0 <HAL_RCC_OscConfig+0x4b4>)
 8009b42:	2201      	movs	r2, #1
 8009b44:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009b46:	f7fe ff61 	bl	8008a0c <HAL_GetTick>
 8009b4a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009b4c:	e008      	b.n	8009b60 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009b4e:	f7fe ff5d 	bl	8008a0c <HAL_GetTick>
 8009b52:	4602      	mov	r2, r0
 8009b54:	693b      	ldr	r3, [r7, #16]
 8009b56:	1ad3      	subs	r3, r2, r3
 8009b58:	2b02      	cmp	r3, #2
 8009b5a:	d901      	bls.n	8009b60 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8009b5c:	2303      	movs	r3, #3
 8009b5e:	e064      	b.n	8009c2a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009b60:	4b11      	ldr	r3, [pc, #68]	; (8009ba8 <HAL_RCC_OscConfig+0x4ac>)
 8009b62:	681b      	ldr	r3, [r3, #0]
 8009b64:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009b68:	2b00      	cmp	r3, #0
 8009b6a:	d0f0      	beq.n	8009b4e <HAL_RCC_OscConfig+0x452>
 8009b6c:	e05c      	b.n	8009c28 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009b6e:	4b10      	ldr	r3, [pc, #64]	; (8009bb0 <HAL_RCC_OscConfig+0x4b4>)
 8009b70:	2200      	movs	r2, #0
 8009b72:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009b74:	f7fe ff4a 	bl	8008a0c <HAL_GetTick>
 8009b78:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009b7a:	e008      	b.n	8009b8e <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009b7c:	f7fe ff46 	bl	8008a0c <HAL_GetTick>
 8009b80:	4602      	mov	r2, r0
 8009b82:	693b      	ldr	r3, [r7, #16]
 8009b84:	1ad3      	subs	r3, r2, r3
 8009b86:	2b02      	cmp	r3, #2
 8009b88:	d901      	bls.n	8009b8e <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8009b8a:	2303      	movs	r3, #3
 8009b8c:	e04d      	b.n	8009c2a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009b8e:	4b06      	ldr	r3, [pc, #24]	; (8009ba8 <HAL_RCC_OscConfig+0x4ac>)
 8009b90:	681b      	ldr	r3, [r3, #0]
 8009b92:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009b96:	2b00      	cmp	r3, #0
 8009b98:	d1f0      	bne.n	8009b7c <HAL_RCC_OscConfig+0x480>
 8009b9a:	e045      	b.n	8009c28 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	699b      	ldr	r3, [r3, #24]
 8009ba0:	2b01      	cmp	r3, #1
 8009ba2:	d107      	bne.n	8009bb4 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8009ba4:	2301      	movs	r3, #1
 8009ba6:	e040      	b.n	8009c2a <HAL_RCC_OscConfig+0x52e>
 8009ba8:	40023800 	.word	0x40023800
 8009bac:	40007000 	.word	0x40007000
 8009bb0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8009bb4:	4b1f      	ldr	r3, [pc, #124]	; (8009c34 <HAL_RCC_OscConfig+0x538>)
 8009bb6:	685b      	ldr	r3, [r3, #4]
 8009bb8:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	699b      	ldr	r3, [r3, #24]
 8009bbe:	2b01      	cmp	r3, #1
 8009bc0:	d030      	beq.n	8009c24 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009bc2:	68fb      	ldr	r3, [r7, #12]
 8009bc4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009bcc:	429a      	cmp	r2, r3
 8009bce:	d129      	bne.n	8009c24 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8009bd0:	68fb      	ldr	r3, [r7, #12]
 8009bd2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009bda:	429a      	cmp	r2, r3
 8009bdc:	d122      	bne.n	8009c24 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8009bde:	68fa      	ldr	r2, [r7, #12]
 8009be0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8009be4:	4013      	ands	r3, r2
 8009be6:	687a      	ldr	r2, [r7, #4]
 8009be8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8009bea:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8009bec:	4293      	cmp	r3, r2
 8009bee:	d119      	bne.n	8009c24 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8009bf0:	68fb      	ldr	r3, [r7, #12]
 8009bf2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8009bf6:	687b      	ldr	r3, [r7, #4]
 8009bf8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009bfa:	085b      	lsrs	r3, r3, #1
 8009bfc:	3b01      	subs	r3, #1
 8009bfe:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8009c00:	429a      	cmp	r2, r3
 8009c02:	d10f      	bne.n	8009c24 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8009c04:	68fb      	ldr	r3, [r7, #12]
 8009c06:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8009c0a:	687b      	ldr	r3, [r7, #4]
 8009c0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c0e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8009c10:	429a      	cmp	r2, r3
 8009c12:	d107      	bne.n	8009c24 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8009c14:	68fb      	ldr	r3, [r7, #12]
 8009c16:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8009c1a:	687b      	ldr	r3, [r7, #4]
 8009c1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009c1e:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8009c20:	429a      	cmp	r2, r3
 8009c22:	d001      	beq.n	8009c28 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8009c24:	2301      	movs	r3, #1
 8009c26:	e000      	b.n	8009c2a <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8009c28:	2300      	movs	r3, #0
}
 8009c2a:	4618      	mov	r0, r3
 8009c2c:	3718      	adds	r7, #24
 8009c2e:	46bd      	mov	sp, r7
 8009c30:	bd80      	pop	{r7, pc}
 8009c32:	bf00      	nop
 8009c34:	40023800 	.word	0x40023800

08009c38 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009c38:	b580      	push	{r7, lr}
 8009c3a:	b082      	sub	sp, #8
 8009c3c:	af00      	add	r7, sp, #0
 8009c3e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	2b00      	cmp	r3, #0
 8009c44:	d101      	bne.n	8009c4a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009c46:	2301      	movs	r3, #1
 8009c48:	e03f      	b.n	8009cca <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8009c4a:	687b      	ldr	r3, [r7, #4]
 8009c4c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009c50:	b2db      	uxtb	r3, r3
 8009c52:	2b00      	cmp	r3, #0
 8009c54:	d106      	bne.n	8009c64 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009c56:	687b      	ldr	r3, [r7, #4]
 8009c58:	2200      	movs	r2, #0
 8009c5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009c5e:	6878      	ldr	r0, [r7, #4]
 8009c60:	f7fe fdae 	bl	80087c0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	2224      	movs	r2, #36	; 0x24
 8009c68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	681b      	ldr	r3, [r3, #0]
 8009c70:	68da      	ldr	r2, [r3, #12]
 8009c72:	687b      	ldr	r3, [r7, #4]
 8009c74:	681b      	ldr	r3, [r3, #0]
 8009c76:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8009c7a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8009c7c:	6878      	ldr	r0, [r7, #4]
 8009c7e:	f000 f929 	bl	8009ed4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009c82:	687b      	ldr	r3, [r7, #4]
 8009c84:	681b      	ldr	r3, [r3, #0]
 8009c86:	691a      	ldr	r2, [r3, #16]
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	681b      	ldr	r3, [r3, #0]
 8009c8c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8009c90:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	681b      	ldr	r3, [r3, #0]
 8009c96:	695a      	ldr	r2, [r3, #20]
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	681b      	ldr	r3, [r3, #0]
 8009c9c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8009ca0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8009ca2:	687b      	ldr	r3, [r7, #4]
 8009ca4:	681b      	ldr	r3, [r3, #0]
 8009ca6:	68da      	ldr	r2, [r3, #12]
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	681b      	ldr	r3, [r3, #0]
 8009cac:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8009cb0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009cb2:	687b      	ldr	r3, [r7, #4]
 8009cb4:	2200      	movs	r2, #0
 8009cb6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	2220      	movs	r2, #32
 8009cbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8009cc0:	687b      	ldr	r3, [r7, #4]
 8009cc2:	2220      	movs	r2, #32
 8009cc4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8009cc8:	2300      	movs	r3, #0
}
 8009cca:	4618      	mov	r0, r3
 8009ccc:	3708      	adds	r7, #8
 8009cce:	46bd      	mov	sp, r7
 8009cd0:	bd80      	pop	{r7, pc}

08009cd2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009cd2:	b580      	push	{r7, lr}
 8009cd4:	b08a      	sub	sp, #40	; 0x28
 8009cd6:	af02      	add	r7, sp, #8
 8009cd8:	60f8      	str	r0, [r7, #12]
 8009cda:	60b9      	str	r1, [r7, #8]
 8009cdc:	603b      	str	r3, [r7, #0]
 8009cde:	4613      	mov	r3, r2
 8009ce0:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8009ce2:	2300      	movs	r3, #0
 8009ce4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009ce6:	68fb      	ldr	r3, [r7, #12]
 8009ce8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009cec:	b2db      	uxtb	r3, r3
 8009cee:	2b20      	cmp	r3, #32
 8009cf0:	d17c      	bne.n	8009dec <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8009cf2:	68bb      	ldr	r3, [r7, #8]
 8009cf4:	2b00      	cmp	r3, #0
 8009cf6:	d002      	beq.n	8009cfe <HAL_UART_Transmit+0x2c>
 8009cf8:	88fb      	ldrh	r3, [r7, #6]
 8009cfa:	2b00      	cmp	r3, #0
 8009cfc:	d101      	bne.n	8009d02 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8009cfe:	2301      	movs	r3, #1
 8009d00:	e075      	b.n	8009dee <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8009d02:	68fb      	ldr	r3, [r7, #12]
 8009d04:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009d08:	2b01      	cmp	r3, #1
 8009d0a:	d101      	bne.n	8009d10 <HAL_UART_Transmit+0x3e>
 8009d0c:	2302      	movs	r3, #2
 8009d0e:	e06e      	b.n	8009dee <HAL_UART_Transmit+0x11c>
 8009d10:	68fb      	ldr	r3, [r7, #12]
 8009d12:	2201      	movs	r2, #1
 8009d14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009d18:	68fb      	ldr	r3, [r7, #12]
 8009d1a:	2200      	movs	r2, #0
 8009d1c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009d1e:	68fb      	ldr	r3, [r7, #12]
 8009d20:	2221      	movs	r2, #33	; 0x21
 8009d22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8009d26:	f7fe fe71 	bl	8008a0c <HAL_GetTick>
 8009d2a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8009d2c:	68fb      	ldr	r3, [r7, #12]
 8009d2e:	88fa      	ldrh	r2, [r7, #6]
 8009d30:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8009d32:	68fb      	ldr	r3, [r7, #12]
 8009d34:	88fa      	ldrh	r2, [r7, #6]
 8009d36:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009d38:	68fb      	ldr	r3, [r7, #12]
 8009d3a:	689b      	ldr	r3, [r3, #8]
 8009d3c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009d40:	d108      	bne.n	8009d54 <HAL_UART_Transmit+0x82>
 8009d42:	68fb      	ldr	r3, [r7, #12]
 8009d44:	691b      	ldr	r3, [r3, #16]
 8009d46:	2b00      	cmp	r3, #0
 8009d48:	d104      	bne.n	8009d54 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8009d4a:	2300      	movs	r3, #0
 8009d4c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8009d4e:	68bb      	ldr	r3, [r7, #8]
 8009d50:	61bb      	str	r3, [r7, #24]
 8009d52:	e003      	b.n	8009d5c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8009d54:	68bb      	ldr	r3, [r7, #8]
 8009d56:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8009d58:	2300      	movs	r3, #0
 8009d5a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8009d5c:	68fb      	ldr	r3, [r7, #12]
 8009d5e:	2200      	movs	r2, #0
 8009d60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8009d64:	e02a      	b.n	8009dbc <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8009d66:	683b      	ldr	r3, [r7, #0]
 8009d68:	9300      	str	r3, [sp, #0]
 8009d6a:	697b      	ldr	r3, [r7, #20]
 8009d6c:	2200      	movs	r2, #0
 8009d6e:	2180      	movs	r1, #128	; 0x80
 8009d70:	68f8      	ldr	r0, [r7, #12]
 8009d72:	f000 f840 	bl	8009df6 <UART_WaitOnFlagUntilTimeout>
 8009d76:	4603      	mov	r3, r0
 8009d78:	2b00      	cmp	r3, #0
 8009d7a:	d001      	beq.n	8009d80 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8009d7c:	2303      	movs	r3, #3
 8009d7e:	e036      	b.n	8009dee <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8009d80:	69fb      	ldr	r3, [r7, #28]
 8009d82:	2b00      	cmp	r3, #0
 8009d84:	d10b      	bne.n	8009d9e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8009d86:	69bb      	ldr	r3, [r7, #24]
 8009d88:	881b      	ldrh	r3, [r3, #0]
 8009d8a:	461a      	mov	r2, r3
 8009d8c:	68fb      	ldr	r3, [r7, #12]
 8009d8e:	681b      	ldr	r3, [r3, #0]
 8009d90:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009d94:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8009d96:	69bb      	ldr	r3, [r7, #24]
 8009d98:	3302      	adds	r3, #2
 8009d9a:	61bb      	str	r3, [r7, #24]
 8009d9c:	e007      	b.n	8009dae <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8009d9e:	69fb      	ldr	r3, [r7, #28]
 8009da0:	781a      	ldrb	r2, [r3, #0]
 8009da2:	68fb      	ldr	r3, [r7, #12]
 8009da4:	681b      	ldr	r3, [r3, #0]
 8009da6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8009da8:	69fb      	ldr	r3, [r7, #28]
 8009daa:	3301      	adds	r3, #1
 8009dac:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8009dae:	68fb      	ldr	r3, [r7, #12]
 8009db0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8009db2:	b29b      	uxth	r3, r3
 8009db4:	3b01      	subs	r3, #1
 8009db6:	b29a      	uxth	r2, r3
 8009db8:	68fb      	ldr	r3, [r7, #12]
 8009dba:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8009dbc:	68fb      	ldr	r3, [r7, #12]
 8009dbe:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8009dc0:	b29b      	uxth	r3, r3
 8009dc2:	2b00      	cmp	r3, #0
 8009dc4:	d1cf      	bne.n	8009d66 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8009dc6:	683b      	ldr	r3, [r7, #0]
 8009dc8:	9300      	str	r3, [sp, #0]
 8009dca:	697b      	ldr	r3, [r7, #20]
 8009dcc:	2200      	movs	r2, #0
 8009dce:	2140      	movs	r1, #64	; 0x40
 8009dd0:	68f8      	ldr	r0, [r7, #12]
 8009dd2:	f000 f810 	bl	8009df6 <UART_WaitOnFlagUntilTimeout>
 8009dd6:	4603      	mov	r3, r0
 8009dd8:	2b00      	cmp	r3, #0
 8009dda:	d001      	beq.n	8009de0 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8009ddc:	2303      	movs	r3, #3
 8009dde:	e006      	b.n	8009dee <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8009de0:	68fb      	ldr	r3, [r7, #12]
 8009de2:	2220      	movs	r2, #32
 8009de4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8009de8:	2300      	movs	r3, #0
 8009dea:	e000      	b.n	8009dee <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8009dec:	2302      	movs	r3, #2
  }
}
 8009dee:	4618      	mov	r0, r3
 8009df0:	3720      	adds	r7, #32
 8009df2:	46bd      	mov	sp, r7
 8009df4:	bd80      	pop	{r7, pc}

08009df6 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8009df6:	b580      	push	{r7, lr}
 8009df8:	b090      	sub	sp, #64	; 0x40
 8009dfa:	af00      	add	r7, sp, #0
 8009dfc:	60f8      	str	r0, [r7, #12]
 8009dfe:	60b9      	str	r1, [r7, #8]
 8009e00:	603b      	str	r3, [r7, #0]
 8009e02:	4613      	mov	r3, r2
 8009e04:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009e06:	e050      	b.n	8009eaa <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009e08:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009e0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009e0e:	d04c      	beq.n	8009eaa <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8009e10:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009e12:	2b00      	cmp	r3, #0
 8009e14:	d007      	beq.n	8009e26 <UART_WaitOnFlagUntilTimeout+0x30>
 8009e16:	f7fe fdf9 	bl	8008a0c <HAL_GetTick>
 8009e1a:	4602      	mov	r2, r0
 8009e1c:	683b      	ldr	r3, [r7, #0]
 8009e1e:	1ad3      	subs	r3, r2, r3
 8009e20:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009e22:	429a      	cmp	r2, r3
 8009e24:	d241      	bcs.n	8009eaa <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8009e26:	68fb      	ldr	r3, [r7, #12]
 8009e28:	681b      	ldr	r3, [r3, #0]
 8009e2a:	330c      	adds	r3, #12
 8009e2c:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e30:	e853 3f00 	ldrex	r3, [r3]
 8009e34:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009e36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e38:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8009e3c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009e3e:	68fb      	ldr	r3, [r7, #12]
 8009e40:	681b      	ldr	r3, [r3, #0]
 8009e42:	330c      	adds	r3, #12
 8009e44:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8009e46:	637a      	str	r2, [r7, #52]	; 0x34
 8009e48:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e4a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8009e4c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009e4e:	e841 2300 	strex	r3, r2, [r1]
 8009e52:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8009e54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e56:	2b00      	cmp	r3, #0
 8009e58:	d1e5      	bne.n	8009e26 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009e5a:	68fb      	ldr	r3, [r7, #12]
 8009e5c:	681b      	ldr	r3, [r3, #0]
 8009e5e:	3314      	adds	r3, #20
 8009e60:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e62:	697b      	ldr	r3, [r7, #20]
 8009e64:	e853 3f00 	ldrex	r3, [r3]
 8009e68:	613b      	str	r3, [r7, #16]
   return(result);
 8009e6a:	693b      	ldr	r3, [r7, #16]
 8009e6c:	f023 0301 	bic.w	r3, r3, #1
 8009e70:	63bb      	str	r3, [r7, #56]	; 0x38
 8009e72:	68fb      	ldr	r3, [r7, #12]
 8009e74:	681b      	ldr	r3, [r3, #0]
 8009e76:	3314      	adds	r3, #20
 8009e78:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009e7a:	623a      	str	r2, [r7, #32]
 8009e7c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e7e:	69f9      	ldr	r1, [r7, #28]
 8009e80:	6a3a      	ldr	r2, [r7, #32]
 8009e82:	e841 2300 	strex	r3, r2, [r1]
 8009e86:	61bb      	str	r3, [r7, #24]
   return(result);
 8009e88:	69bb      	ldr	r3, [r7, #24]
 8009e8a:	2b00      	cmp	r3, #0
 8009e8c:	d1e5      	bne.n	8009e5a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8009e8e:	68fb      	ldr	r3, [r7, #12]
 8009e90:	2220      	movs	r2, #32
 8009e92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8009e96:	68fb      	ldr	r3, [r7, #12]
 8009e98:	2220      	movs	r2, #32
 8009e9a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8009e9e:	68fb      	ldr	r3, [r7, #12]
 8009ea0:	2200      	movs	r2, #0
 8009ea2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8009ea6:	2303      	movs	r3, #3
 8009ea8:	e00f      	b.n	8009eca <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009eaa:	68fb      	ldr	r3, [r7, #12]
 8009eac:	681b      	ldr	r3, [r3, #0]
 8009eae:	681a      	ldr	r2, [r3, #0]
 8009eb0:	68bb      	ldr	r3, [r7, #8]
 8009eb2:	4013      	ands	r3, r2
 8009eb4:	68ba      	ldr	r2, [r7, #8]
 8009eb6:	429a      	cmp	r2, r3
 8009eb8:	bf0c      	ite	eq
 8009eba:	2301      	moveq	r3, #1
 8009ebc:	2300      	movne	r3, #0
 8009ebe:	b2db      	uxtb	r3, r3
 8009ec0:	461a      	mov	r2, r3
 8009ec2:	79fb      	ldrb	r3, [r7, #7]
 8009ec4:	429a      	cmp	r2, r3
 8009ec6:	d09f      	beq.n	8009e08 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8009ec8:	2300      	movs	r3, #0
}
 8009eca:	4618      	mov	r0, r3
 8009ecc:	3740      	adds	r7, #64	; 0x40
 8009ece:	46bd      	mov	sp, r7
 8009ed0:	bd80      	pop	{r7, pc}
	...

08009ed4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009ed4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009ed8:	b0c0      	sub	sp, #256	; 0x100
 8009eda:	af00      	add	r7, sp, #0
 8009edc:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009ee0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009ee4:	681b      	ldr	r3, [r3, #0]
 8009ee6:	691b      	ldr	r3, [r3, #16]
 8009ee8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8009eec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009ef0:	68d9      	ldr	r1, [r3, #12]
 8009ef2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009ef6:	681a      	ldr	r2, [r3, #0]
 8009ef8:	ea40 0301 	orr.w	r3, r0, r1
 8009efc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8009efe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009f02:	689a      	ldr	r2, [r3, #8]
 8009f04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009f08:	691b      	ldr	r3, [r3, #16]
 8009f0a:	431a      	orrs	r2, r3
 8009f0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009f10:	695b      	ldr	r3, [r3, #20]
 8009f12:	431a      	orrs	r2, r3
 8009f14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009f18:	69db      	ldr	r3, [r3, #28]
 8009f1a:	4313      	orrs	r3, r2
 8009f1c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8009f20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009f24:	681b      	ldr	r3, [r3, #0]
 8009f26:	68db      	ldr	r3, [r3, #12]
 8009f28:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8009f2c:	f021 010c 	bic.w	r1, r1, #12
 8009f30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009f34:	681a      	ldr	r2, [r3, #0]
 8009f36:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8009f3a:	430b      	orrs	r3, r1
 8009f3c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8009f3e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009f42:	681b      	ldr	r3, [r3, #0]
 8009f44:	695b      	ldr	r3, [r3, #20]
 8009f46:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8009f4a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009f4e:	6999      	ldr	r1, [r3, #24]
 8009f50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009f54:	681a      	ldr	r2, [r3, #0]
 8009f56:	ea40 0301 	orr.w	r3, r0, r1
 8009f5a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8009f5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009f60:	681a      	ldr	r2, [r3, #0]
 8009f62:	4b8f      	ldr	r3, [pc, #572]	; (800a1a0 <UART_SetConfig+0x2cc>)
 8009f64:	429a      	cmp	r2, r3
 8009f66:	d005      	beq.n	8009f74 <UART_SetConfig+0xa0>
 8009f68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009f6c:	681a      	ldr	r2, [r3, #0]
 8009f6e:	4b8d      	ldr	r3, [pc, #564]	; (800a1a4 <UART_SetConfig+0x2d0>)
 8009f70:	429a      	cmp	r2, r3
 8009f72:	d104      	bne.n	8009f7e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8009f74:	f7ff f97e 	bl	8009274 <HAL_RCC_GetPCLK2Freq>
 8009f78:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8009f7c:	e003      	b.n	8009f86 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8009f7e:	f7ff f965 	bl	800924c <HAL_RCC_GetPCLK1Freq>
 8009f82:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009f86:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009f8a:	69db      	ldr	r3, [r3, #28]
 8009f8c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009f90:	f040 810c 	bne.w	800a1ac <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8009f94:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009f98:	2200      	movs	r2, #0
 8009f9a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8009f9e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8009fa2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8009fa6:	4622      	mov	r2, r4
 8009fa8:	462b      	mov	r3, r5
 8009faa:	1891      	adds	r1, r2, r2
 8009fac:	65b9      	str	r1, [r7, #88]	; 0x58
 8009fae:	415b      	adcs	r3, r3
 8009fb0:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009fb2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8009fb6:	4621      	mov	r1, r4
 8009fb8:	eb12 0801 	adds.w	r8, r2, r1
 8009fbc:	4629      	mov	r1, r5
 8009fbe:	eb43 0901 	adc.w	r9, r3, r1
 8009fc2:	f04f 0200 	mov.w	r2, #0
 8009fc6:	f04f 0300 	mov.w	r3, #0
 8009fca:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8009fce:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8009fd2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8009fd6:	4690      	mov	r8, r2
 8009fd8:	4699      	mov	r9, r3
 8009fda:	4623      	mov	r3, r4
 8009fdc:	eb18 0303 	adds.w	r3, r8, r3
 8009fe0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8009fe4:	462b      	mov	r3, r5
 8009fe6:	eb49 0303 	adc.w	r3, r9, r3
 8009fea:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8009fee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009ff2:	685b      	ldr	r3, [r3, #4]
 8009ff4:	2200      	movs	r2, #0
 8009ff6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8009ffa:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8009ffe:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800a002:	460b      	mov	r3, r1
 800a004:	18db      	adds	r3, r3, r3
 800a006:	653b      	str	r3, [r7, #80]	; 0x50
 800a008:	4613      	mov	r3, r2
 800a00a:	eb42 0303 	adc.w	r3, r2, r3
 800a00e:	657b      	str	r3, [r7, #84]	; 0x54
 800a010:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800a014:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800a018:	f7fe f8f4 	bl	8008204 <__aeabi_uldivmod>
 800a01c:	4602      	mov	r2, r0
 800a01e:	460b      	mov	r3, r1
 800a020:	4b61      	ldr	r3, [pc, #388]	; (800a1a8 <UART_SetConfig+0x2d4>)
 800a022:	fba3 2302 	umull	r2, r3, r3, r2
 800a026:	095b      	lsrs	r3, r3, #5
 800a028:	011c      	lsls	r4, r3, #4
 800a02a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a02e:	2200      	movs	r2, #0
 800a030:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800a034:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800a038:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800a03c:	4642      	mov	r2, r8
 800a03e:	464b      	mov	r3, r9
 800a040:	1891      	adds	r1, r2, r2
 800a042:	64b9      	str	r1, [r7, #72]	; 0x48
 800a044:	415b      	adcs	r3, r3
 800a046:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a048:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800a04c:	4641      	mov	r1, r8
 800a04e:	eb12 0a01 	adds.w	sl, r2, r1
 800a052:	4649      	mov	r1, r9
 800a054:	eb43 0b01 	adc.w	fp, r3, r1
 800a058:	f04f 0200 	mov.w	r2, #0
 800a05c:	f04f 0300 	mov.w	r3, #0
 800a060:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800a064:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800a068:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800a06c:	4692      	mov	sl, r2
 800a06e:	469b      	mov	fp, r3
 800a070:	4643      	mov	r3, r8
 800a072:	eb1a 0303 	adds.w	r3, sl, r3
 800a076:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800a07a:	464b      	mov	r3, r9
 800a07c:	eb4b 0303 	adc.w	r3, fp, r3
 800a080:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800a084:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a088:	685b      	ldr	r3, [r3, #4]
 800a08a:	2200      	movs	r2, #0
 800a08c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800a090:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800a094:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800a098:	460b      	mov	r3, r1
 800a09a:	18db      	adds	r3, r3, r3
 800a09c:	643b      	str	r3, [r7, #64]	; 0x40
 800a09e:	4613      	mov	r3, r2
 800a0a0:	eb42 0303 	adc.w	r3, r2, r3
 800a0a4:	647b      	str	r3, [r7, #68]	; 0x44
 800a0a6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800a0aa:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800a0ae:	f7fe f8a9 	bl	8008204 <__aeabi_uldivmod>
 800a0b2:	4602      	mov	r2, r0
 800a0b4:	460b      	mov	r3, r1
 800a0b6:	4611      	mov	r1, r2
 800a0b8:	4b3b      	ldr	r3, [pc, #236]	; (800a1a8 <UART_SetConfig+0x2d4>)
 800a0ba:	fba3 2301 	umull	r2, r3, r3, r1
 800a0be:	095b      	lsrs	r3, r3, #5
 800a0c0:	2264      	movs	r2, #100	; 0x64
 800a0c2:	fb02 f303 	mul.w	r3, r2, r3
 800a0c6:	1acb      	subs	r3, r1, r3
 800a0c8:	00db      	lsls	r3, r3, #3
 800a0ca:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800a0ce:	4b36      	ldr	r3, [pc, #216]	; (800a1a8 <UART_SetConfig+0x2d4>)
 800a0d0:	fba3 2302 	umull	r2, r3, r3, r2
 800a0d4:	095b      	lsrs	r3, r3, #5
 800a0d6:	005b      	lsls	r3, r3, #1
 800a0d8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800a0dc:	441c      	add	r4, r3
 800a0de:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a0e2:	2200      	movs	r2, #0
 800a0e4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800a0e8:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800a0ec:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800a0f0:	4642      	mov	r2, r8
 800a0f2:	464b      	mov	r3, r9
 800a0f4:	1891      	adds	r1, r2, r2
 800a0f6:	63b9      	str	r1, [r7, #56]	; 0x38
 800a0f8:	415b      	adcs	r3, r3
 800a0fa:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a0fc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800a100:	4641      	mov	r1, r8
 800a102:	1851      	adds	r1, r2, r1
 800a104:	6339      	str	r1, [r7, #48]	; 0x30
 800a106:	4649      	mov	r1, r9
 800a108:	414b      	adcs	r3, r1
 800a10a:	637b      	str	r3, [r7, #52]	; 0x34
 800a10c:	f04f 0200 	mov.w	r2, #0
 800a110:	f04f 0300 	mov.w	r3, #0
 800a114:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800a118:	4659      	mov	r1, fp
 800a11a:	00cb      	lsls	r3, r1, #3
 800a11c:	4651      	mov	r1, sl
 800a11e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800a122:	4651      	mov	r1, sl
 800a124:	00ca      	lsls	r2, r1, #3
 800a126:	4610      	mov	r0, r2
 800a128:	4619      	mov	r1, r3
 800a12a:	4603      	mov	r3, r0
 800a12c:	4642      	mov	r2, r8
 800a12e:	189b      	adds	r3, r3, r2
 800a130:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800a134:	464b      	mov	r3, r9
 800a136:	460a      	mov	r2, r1
 800a138:	eb42 0303 	adc.w	r3, r2, r3
 800a13c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800a140:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a144:	685b      	ldr	r3, [r3, #4]
 800a146:	2200      	movs	r2, #0
 800a148:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800a14c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800a150:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800a154:	460b      	mov	r3, r1
 800a156:	18db      	adds	r3, r3, r3
 800a158:	62bb      	str	r3, [r7, #40]	; 0x28
 800a15a:	4613      	mov	r3, r2
 800a15c:	eb42 0303 	adc.w	r3, r2, r3
 800a160:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a162:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800a166:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800a16a:	f7fe f84b 	bl	8008204 <__aeabi_uldivmod>
 800a16e:	4602      	mov	r2, r0
 800a170:	460b      	mov	r3, r1
 800a172:	4b0d      	ldr	r3, [pc, #52]	; (800a1a8 <UART_SetConfig+0x2d4>)
 800a174:	fba3 1302 	umull	r1, r3, r3, r2
 800a178:	095b      	lsrs	r3, r3, #5
 800a17a:	2164      	movs	r1, #100	; 0x64
 800a17c:	fb01 f303 	mul.w	r3, r1, r3
 800a180:	1ad3      	subs	r3, r2, r3
 800a182:	00db      	lsls	r3, r3, #3
 800a184:	3332      	adds	r3, #50	; 0x32
 800a186:	4a08      	ldr	r2, [pc, #32]	; (800a1a8 <UART_SetConfig+0x2d4>)
 800a188:	fba2 2303 	umull	r2, r3, r2, r3
 800a18c:	095b      	lsrs	r3, r3, #5
 800a18e:	f003 0207 	and.w	r2, r3, #7
 800a192:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a196:	681b      	ldr	r3, [r3, #0]
 800a198:	4422      	add	r2, r4
 800a19a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800a19c:	e106      	b.n	800a3ac <UART_SetConfig+0x4d8>
 800a19e:	bf00      	nop
 800a1a0:	40011000 	.word	0x40011000
 800a1a4:	40011400 	.word	0x40011400
 800a1a8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800a1ac:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a1b0:	2200      	movs	r2, #0
 800a1b2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800a1b6:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800a1ba:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800a1be:	4642      	mov	r2, r8
 800a1c0:	464b      	mov	r3, r9
 800a1c2:	1891      	adds	r1, r2, r2
 800a1c4:	6239      	str	r1, [r7, #32]
 800a1c6:	415b      	adcs	r3, r3
 800a1c8:	627b      	str	r3, [r7, #36]	; 0x24
 800a1ca:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800a1ce:	4641      	mov	r1, r8
 800a1d0:	1854      	adds	r4, r2, r1
 800a1d2:	4649      	mov	r1, r9
 800a1d4:	eb43 0501 	adc.w	r5, r3, r1
 800a1d8:	f04f 0200 	mov.w	r2, #0
 800a1dc:	f04f 0300 	mov.w	r3, #0
 800a1e0:	00eb      	lsls	r3, r5, #3
 800a1e2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800a1e6:	00e2      	lsls	r2, r4, #3
 800a1e8:	4614      	mov	r4, r2
 800a1ea:	461d      	mov	r5, r3
 800a1ec:	4643      	mov	r3, r8
 800a1ee:	18e3      	adds	r3, r4, r3
 800a1f0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800a1f4:	464b      	mov	r3, r9
 800a1f6:	eb45 0303 	adc.w	r3, r5, r3
 800a1fa:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800a1fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a202:	685b      	ldr	r3, [r3, #4]
 800a204:	2200      	movs	r2, #0
 800a206:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800a20a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800a20e:	f04f 0200 	mov.w	r2, #0
 800a212:	f04f 0300 	mov.w	r3, #0
 800a216:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800a21a:	4629      	mov	r1, r5
 800a21c:	008b      	lsls	r3, r1, #2
 800a21e:	4621      	mov	r1, r4
 800a220:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800a224:	4621      	mov	r1, r4
 800a226:	008a      	lsls	r2, r1, #2
 800a228:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800a22c:	f7fd ffea 	bl	8008204 <__aeabi_uldivmod>
 800a230:	4602      	mov	r2, r0
 800a232:	460b      	mov	r3, r1
 800a234:	4b60      	ldr	r3, [pc, #384]	; (800a3b8 <UART_SetConfig+0x4e4>)
 800a236:	fba3 2302 	umull	r2, r3, r3, r2
 800a23a:	095b      	lsrs	r3, r3, #5
 800a23c:	011c      	lsls	r4, r3, #4
 800a23e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a242:	2200      	movs	r2, #0
 800a244:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800a248:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800a24c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800a250:	4642      	mov	r2, r8
 800a252:	464b      	mov	r3, r9
 800a254:	1891      	adds	r1, r2, r2
 800a256:	61b9      	str	r1, [r7, #24]
 800a258:	415b      	adcs	r3, r3
 800a25a:	61fb      	str	r3, [r7, #28]
 800a25c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800a260:	4641      	mov	r1, r8
 800a262:	1851      	adds	r1, r2, r1
 800a264:	6139      	str	r1, [r7, #16]
 800a266:	4649      	mov	r1, r9
 800a268:	414b      	adcs	r3, r1
 800a26a:	617b      	str	r3, [r7, #20]
 800a26c:	f04f 0200 	mov.w	r2, #0
 800a270:	f04f 0300 	mov.w	r3, #0
 800a274:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800a278:	4659      	mov	r1, fp
 800a27a:	00cb      	lsls	r3, r1, #3
 800a27c:	4651      	mov	r1, sl
 800a27e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800a282:	4651      	mov	r1, sl
 800a284:	00ca      	lsls	r2, r1, #3
 800a286:	4610      	mov	r0, r2
 800a288:	4619      	mov	r1, r3
 800a28a:	4603      	mov	r3, r0
 800a28c:	4642      	mov	r2, r8
 800a28e:	189b      	adds	r3, r3, r2
 800a290:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800a294:	464b      	mov	r3, r9
 800a296:	460a      	mov	r2, r1
 800a298:	eb42 0303 	adc.w	r3, r2, r3
 800a29c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800a2a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a2a4:	685b      	ldr	r3, [r3, #4]
 800a2a6:	2200      	movs	r2, #0
 800a2a8:	67bb      	str	r3, [r7, #120]	; 0x78
 800a2aa:	67fa      	str	r2, [r7, #124]	; 0x7c
 800a2ac:	f04f 0200 	mov.w	r2, #0
 800a2b0:	f04f 0300 	mov.w	r3, #0
 800a2b4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800a2b8:	4649      	mov	r1, r9
 800a2ba:	008b      	lsls	r3, r1, #2
 800a2bc:	4641      	mov	r1, r8
 800a2be:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800a2c2:	4641      	mov	r1, r8
 800a2c4:	008a      	lsls	r2, r1, #2
 800a2c6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800a2ca:	f7fd ff9b 	bl	8008204 <__aeabi_uldivmod>
 800a2ce:	4602      	mov	r2, r0
 800a2d0:	460b      	mov	r3, r1
 800a2d2:	4611      	mov	r1, r2
 800a2d4:	4b38      	ldr	r3, [pc, #224]	; (800a3b8 <UART_SetConfig+0x4e4>)
 800a2d6:	fba3 2301 	umull	r2, r3, r3, r1
 800a2da:	095b      	lsrs	r3, r3, #5
 800a2dc:	2264      	movs	r2, #100	; 0x64
 800a2de:	fb02 f303 	mul.w	r3, r2, r3
 800a2e2:	1acb      	subs	r3, r1, r3
 800a2e4:	011b      	lsls	r3, r3, #4
 800a2e6:	3332      	adds	r3, #50	; 0x32
 800a2e8:	4a33      	ldr	r2, [pc, #204]	; (800a3b8 <UART_SetConfig+0x4e4>)
 800a2ea:	fba2 2303 	umull	r2, r3, r2, r3
 800a2ee:	095b      	lsrs	r3, r3, #5
 800a2f0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a2f4:	441c      	add	r4, r3
 800a2f6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a2fa:	2200      	movs	r2, #0
 800a2fc:	673b      	str	r3, [r7, #112]	; 0x70
 800a2fe:	677a      	str	r2, [r7, #116]	; 0x74
 800a300:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800a304:	4642      	mov	r2, r8
 800a306:	464b      	mov	r3, r9
 800a308:	1891      	adds	r1, r2, r2
 800a30a:	60b9      	str	r1, [r7, #8]
 800a30c:	415b      	adcs	r3, r3
 800a30e:	60fb      	str	r3, [r7, #12]
 800a310:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800a314:	4641      	mov	r1, r8
 800a316:	1851      	adds	r1, r2, r1
 800a318:	6039      	str	r1, [r7, #0]
 800a31a:	4649      	mov	r1, r9
 800a31c:	414b      	adcs	r3, r1
 800a31e:	607b      	str	r3, [r7, #4]
 800a320:	f04f 0200 	mov.w	r2, #0
 800a324:	f04f 0300 	mov.w	r3, #0
 800a328:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800a32c:	4659      	mov	r1, fp
 800a32e:	00cb      	lsls	r3, r1, #3
 800a330:	4651      	mov	r1, sl
 800a332:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800a336:	4651      	mov	r1, sl
 800a338:	00ca      	lsls	r2, r1, #3
 800a33a:	4610      	mov	r0, r2
 800a33c:	4619      	mov	r1, r3
 800a33e:	4603      	mov	r3, r0
 800a340:	4642      	mov	r2, r8
 800a342:	189b      	adds	r3, r3, r2
 800a344:	66bb      	str	r3, [r7, #104]	; 0x68
 800a346:	464b      	mov	r3, r9
 800a348:	460a      	mov	r2, r1
 800a34a:	eb42 0303 	adc.w	r3, r2, r3
 800a34e:	66fb      	str	r3, [r7, #108]	; 0x6c
 800a350:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a354:	685b      	ldr	r3, [r3, #4]
 800a356:	2200      	movs	r2, #0
 800a358:	663b      	str	r3, [r7, #96]	; 0x60
 800a35a:	667a      	str	r2, [r7, #100]	; 0x64
 800a35c:	f04f 0200 	mov.w	r2, #0
 800a360:	f04f 0300 	mov.w	r3, #0
 800a364:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800a368:	4649      	mov	r1, r9
 800a36a:	008b      	lsls	r3, r1, #2
 800a36c:	4641      	mov	r1, r8
 800a36e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800a372:	4641      	mov	r1, r8
 800a374:	008a      	lsls	r2, r1, #2
 800a376:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800a37a:	f7fd ff43 	bl	8008204 <__aeabi_uldivmod>
 800a37e:	4602      	mov	r2, r0
 800a380:	460b      	mov	r3, r1
 800a382:	4b0d      	ldr	r3, [pc, #52]	; (800a3b8 <UART_SetConfig+0x4e4>)
 800a384:	fba3 1302 	umull	r1, r3, r3, r2
 800a388:	095b      	lsrs	r3, r3, #5
 800a38a:	2164      	movs	r1, #100	; 0x64
 800a38c:	fb01 f303 	mul.w	r3, r1, r3
 800a390:	1ad3      	subs	r3, r2, r3
 800a392:	011b      	lsls	r3, r3, #4
 800a394:	3332      	adds	r3, #50	; 0x32
 800a396:	4a08      	ldr	r2, [pc, #32]	; (800a3b8 <UART_SetConfig+0x4e4>)
 800a398:	fba2 2303 	umull	r2, r3, r2, r3
 800a39c:	095b      	lsrs	r3, r3, #5
 800a39e:	f003 020f 	and.w	r2, r3, #15
 800a3a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a3a6:	681b      	ldr	r3, [r3, #0]
 800a3a8:	4422      	add	r2, r4
 800a3aa:	609a      	str	r2, [r3, #8]
}
 800a3ac:	bf00      	nop
 800a3ae:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800a3b2:	46bd      	mov	sp, r7
 800a3b4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a3b8:	51eb851f 	.word	0x51eb851f

0800a3bc <memset>:
 800a3bc:	4402      	add	r2, r0
 800a3be:	4603      	mov	r3, r0
 800a3c0:	4293      	cmp	r3, r2
 800a3c2:	d100      	bne.n	800a3c6 <memset+0xa>
 800a3c4:	4770      	bx	lr
 800a3c6:	f803 1b01 	strb.w	r1, [r3], #1
 800a3ca:	e7f9      	b.n	800a3c0 <memset+0x4>

0800a3cc <__libc_init_array>:
 800a3cc:	b570      	push	{r4, r5, r6, lr}
 800a3ce:	4d0d      	ldr	r5, [pc, #52]	; (800a404 <__libc_init_array+0x38>)
 800a3d0:	4c0d      	ldr	r4, [pc, #52]	; (800a408 <__libc_init_array+0x3c>)
 800a3d2:	1b64      	subs	r4, r4, r5
 800a3d4:	10a4      	asrs	r4, r4, #2
 800a3d6:	2600      	movs	r6, #0
 800a3d8:	42a6      	cmp	r6, r4
 800a3da:	d109      	bne.n	800a3f0 <__libc_init_array+0x24>
 800a3dc:	4d0b      	ldr	r5, [pc, #44]	; (800a40c <__libc_init_array+0x40>)
 800a3de:	4c0c      	ldr	r4, [pc, #48]	; (800a410 <__libc_init_array+0x44>)
 800a3e0:	f000 f818 	bl	800a414 <_init>
 800a3e4:	1b64      	subs	r4, r4, r5
 800a3e6:	10a4      	asrs	r4, r4, #2
 800a3e8:	2600      	movs	r6, #0
 800a3ea:	42a6      	cmp	r6, r4
 800a3ec:	d105      	bne.n	800a3fa <__libc_init_array+0x2e>
 800a3ee:	bd70      	pop	{r4, r5, r6, pc}
 800a3f0:	f855 3b04 	ldr.w	r3, [r5], #4
 800a3f4:	4798      	blx	r3
 800a3f6:	3601      	adds	r6, #1
 800a3f8:	e7ee      	b.n	800a3d8 <__libc_init_array+0xc>
 800a3fa:	f855 3b04 	ldr.w	r3, [r5], #4
 800a3fe:	4798      	blx	r3
 800a400:	3601      	adds	r6, #1
 800a402:	e7f2      	b.n	800a3ea <__libc_init_array+0x1e>
 800a404:	0800a464 	.word	0x0800a464
 800a408:	0800a464 	.word	0x0800a464
 800a40c:	0800a464 	.word	0x0800a464
 800a410:	0800a468 	.word	0x0800a468

0800a414 <_init>:
 800a414:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a416:	bf00      	nop
 800a418:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a41a:	bc08      	pop	{r3}
 800a41c:	469e      	mov	lr, r3
 800a41e:	4770      	bx	lr

0800a420 <_fini>:
 800a420:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a422:	bf00      	nop
 800a424:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a426:	bc08      	pop	{r3}
 800a428:	469e      	mov	lr, r3
 800a42a:	4770      	bx	lr
